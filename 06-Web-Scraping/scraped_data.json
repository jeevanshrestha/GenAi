[
  {
    "url": "https://chaidocs.vercel.app/youtube/getting-started/",
    "content": " Getting Started   Reading the docs is a great way to learn. Whether it‚Äôs a new technology, programming language, or framework, delving into the docs helps you gain in-depth knowledge and insights.\nWe have designed this website so that you can develop the habit to read from the docs. In future, our attempt is to provide you guide with all videos so that you can learn directly from docs and get all information in one place.\nNo need to make notes or write down anything. Just read the docs.\nMaximize Your Learning\n\n\n\nRead Actively:\n\nTake Your Time: Don‚Äôt rush through the content. Take the time to understand each section thoroughly.\nHighlight Key Points: If you find something important, highlight it or make a note of it for future reference.\n\n\n\n\nPractice What You Learn\n\nHands-On Practice: Try out code examples and exercises as you read through the documentation. This will help reinforce your understanding.\nBuild Projects: Apply what you‚Äôve learned by building small projects or components. This practical application is crucial for mastering new skills.\n\n\n\n\nUtilize Additional Resources\n\nCross-Reference: If a topic is unclear, look for additional resources like blogs, videos, or forums for different explanations and perspectives.\nAsk Questions: Don‚Äôt hesitate to ask questions in our community or seek help from peers if you encounter any difficulties.\n\n\n\n\nStay Organized\n\nBookmark Important Sections: Use bookmarks to keep track of important sections or topics you may want to revisit.\nUse the Search Feature: Make use of the search functionality to quickly find specific information.\n\n\n\n\nEngage with the Community\n\nJoin Discussions: Participate in community discussions and forums to share knowledge and gain insights from others.\nContribute: If you find any errors or have suggestions for improvements, consider contributing to the docs to help others.\n\n\n\n\nBy following these tips, you can maximize your learning experience and make the most out of the documentation provided. Happy learning!.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Chaudhary Last updated: Apr 22, 2025 Next Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-html/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúChai aur HTML‚Äù series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n Play  \nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousGetting StartedNext HTML Intro  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-html/introduction/",
    "content": " Introduction to HTML   HTML is the foundation of all websites. \nIn this guide, you‚Äôll understand the essentials of HTML and get started with web development.\nWhat is HTML?\nHTML stands for HyperText Markup Language. It‚Äôs the standard markup language for creating and structuring web pages. HTML defines the structure and content of your web page, such as headings, paragraphs, images, and links.\nWhat is HTML5?\nHTML5 is the latest version of HTML. It introduces new tags, attributes, and features, making it simpler and more efficient to build modern, interactive web pages. HTML5 is also designed to be fully backward compatible with previous HTML versions.\nHow much HTML should you learn?\nYou only need the basics of HTML to start creating websites. Typically, mastering HTML essentials should not take more than a weekend. Understand the core tags and structure, and you‚Äôre all set to build web pages effectively.\nText/Code Editor vs. Word Processor\n\n\nText editors are specialized tools for writing and editing plain text files, including source code. They include essential features for coding such as syntax highlighting, auto-completion, and code formatting.\n\n\nWord processors like Microsoft Word or Google Docs are ideal for creating formatted documents such as letters, reports, or presentations‚Äîbut they‚Äôre not suitable for coding.\n\n\nFor HTML development, always use a code editor.\nRecommended Code Editors\nHere are some recommended code editors for writing HTML efficiently:\n\nVisual Studio Code ‚Äì Powerful, widely-used, and beginner-friendly.\nZed ‚Äì Fast and collaborative editor for modern development.\nVIM ‚Äì Highly customizable and efficient (but notoriously tricky to exit!).\nHelix ‚Äì Similar to VIM, but easier to use right out of the box.\n\nEssential VS Code Extensions for HTML\nEnhance your HTML coding experience with these recommended VS Code extensions:\n\nHTML Snippets ‚Äì Quickly insert common HTML structures.\nLive Server ‚Äì Automatically refreshes your browser as you edit your HTML.\n\nEmmet for HTML Productivity\nEmmet is built-in with VS Code and allows you to rapidly generate HTML code using short abbreviations. This significantly speeds up your coding workflow. No need to manually type lengthy tags‚Äîlet Emmet handle it for you.\nSpend some time getting familiar with Emmet shortcuts to greatly improve your productivity. Learn more about Emmet at the official website.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext Emmet Crash Course  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-html/emmit-crash-course/",
    "content": " Emmet Crash Course   Emmit is a code snippets manager for VS Code. It is used to create HTML code faster. Emmit is a must-have tool for any web developer. In VS Code, Emmit is enabled by default. It works only after you have created a new HTML file.\n\nLearn the shortcuts and just press the tab or enter key to get the code you want.\n\nSome common Emmit shortcuts\n\n! - Inserts a <!DOCTYPE html> tag\nh1 - Inserts a <h1> tag\nh2 - Inserts a <h2> tag\np - Inserts a <p> tag\nimg - Inserts an <img> tag\na - Inserts an <a> tag\nul - Inserts an <ul> tag\nul>li - Inserts a <li> tag inside an <ul> tag\nul>li>a - Inserts an <a> tag inside a <li> tag inside an <ul> tag\nul>li*3 - Inserts 3 <li> tags inside an <ul> tag\ndiv - Inserts a <div> tag\ndiv>p - Inserts a <p> tag inside a <div> tag\ndiv>p*3 - Inserts 3 <p> tags inside a <div> tag\n\nID and Class\n\n# - Inserts an id attribute\n. - Inserts a class attribute\n\nExample:\n\n\n#my-id - Inserts an id attribute with the value my-id\n\n\n.my-class - Inserts a class attribute with the value my-class\n\n\ndiv>(header>ul>li*2>a)+footer>p1 - expands into\n <div>  <header>   <ul>    <li><a href=\"\"></a></li>    <li><a href=\"\"></a></li>   </ul>  </header>  <footer>   <p></p>  </footer> </div>\n\n\nGrouping\n\ndiv>(header>ul>li*2>a)+footer>p - Inserts a <div> tag with a <header> tag inside it, a <ul> tag inside it, and 2 <li> tags inside the <ul> tag. Then it inserts an <a> tag inside each <li> tag. Finally it inserts a <footer> tag and a <p> tag inside it.\n\n\nYep, it can go little bit crazy. But you don‚Äôt have to worry about it. Rarely you will need to use it.\n\nCSS shortcuts\n\nstyle - Inserts a <style> tag\npos - Inserts a position property\npos:absolute - Inserts a position property with the value absolute\nbgc - Inserts a background-color property\nbgc:red - Inserts a background-color property with the value red\nma - Inserts a margin:auto property\n\nConclusion\nEmmit is a must-have tool for any web developer. BUT this does not mean you have to learn every single shortcut. You can use Emmit to create HTML code faster. NO ONE remembers all the shortcuts. We use then mostly by trial and error, and learning them as we go.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousHTML IntroNext Common HTML Tags  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-html/html-tags/",
    "content": " Common HTML Tags     Focus on the Essentials  Remember, you don‚Äôt need to master HTML to become a web developer. Focus on the basics and move on quickly. HTML5 only adds a few new tags and attributes to the classic HTML vocabulary. Although accessibility is very important, we‚Äôll cover that later‚Äîespecially if you plan to build web applications with JavaScript or modern frameworks. \nBasic Terminology\n\nTag ‚Äì A piece of text enclosed in angle brackets (e.g., <p>) that defines an HTML element.\nAttribute ‚Äì Extra information provided inside an opening tag to modify an element (e.g., id=\"main\").\nElement ‚Äì A complete HTML structure, typically including an opening tag, content, and a closing tag.\n\nHTML Tags for Text Content\n\n<p> ‚Äì Paragraph\n<span> ‚Äì Inline container for text\n<div> ‚Äì Generic container (block-level element)\n<a> ‚Äì Anchor (hyperlink)\n<img> ‚Äì Image\n<br> ‚Äì Line break\n<hr> ‚Äì Horizontal rule\n<b> ‚Äì Bold text\n<i> ‚Äì Italic text\n<u> ‚Äì Underlined text\n<strong> ‚Äì Strong importance (semantically bold)\n<em> ‚Äì Emphasized text (typically italicized)\n<code> ‚Äì Code snippet\n<pre> ‚Äì Preformatted text\n\nHTML Tags for Lists\n\n<ul> ‚Äì Unordered list\n<ol> ‚Äì Ordered list\n<li> ‚Äì List item\n\nHTML Tags for Tables\n\n<table> ‚Äì Table container\n<tr> ‚Äì Table row\n<td> ‚Äì Table cell\n\nHTML Tags for Forms\n\n<form> ‚Äì Form container\n<input> ‚Äì Input field\n<textarea> ‚Äì Multi-line text input\n<select> ‚Äì Drop-down list\n<option> ‚Äì Option within a drop-down\n<button> ‚Äì Button\n\nHTML Tags for Media\n\n<img> ‚Äì Image element\n<source> ‚Äì Media resource (used within <picture> or <video>)\n<picture> ‚Äì Container for multiple image sources\n<video> ‚Äì Video element\n<audio> ‚Äì Audio element\n\nHTML Tags for Linking and Metadata\n\n<link> ‚Äì Links external resources (e.g., CSS files, favicons)\n<meta> ‚Äì Provides metadata about the document\n<script> ‚Äì Embeds or references executable scripts\n\nScript Tag Variations\n\n<script src=\"script.js\"></script> ‚Äì External script\n<script async src=\"script.js\"></script> ‚Äì Asynchronously loaded script\n<script defer src=\"script.js\"></script> ‚Äì Deferred script execution\n<script type=\"module\" src=\"script.js\"></script> ‚Äì JavaScript module\n\nHTML Tags for Semantic and Meta Content\nModern HTML (HTML5) introduces several semantic tags that enhance the meaning and structure of your document:\n\n<header> ‚Äì Defines a header for a document or section\n<footer> ‚Äì Defines a footer for a document or section\n<nav> ‚Äì Defines navigation links\n<main> ‚Äì Specifies the main content of a document\n<article> ‚Äì Encloses self-contained content\n<section> ‚Äì Groups related content together\n<aside> ‚Äì Represents content aside from the main content\n<details> ‚Äì Defines additional details the user can view or hide\n<summary> ‚Äì Provides a summary for the <details> element\n<time> ‚Äì Represents a specific period in time\n\nAdditionally, standard meta tags include:\n\n<meta charset=\"utf-8\"> ‚Äì Sets the character encoding\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> ‚Äì Ensures responsiveness\n<meta name=\"description\" content=\"Description\"> ‚Äì Provides a page description\n<meta name=\"author\" content=\"Author\"> ‚Äì Identifies the author\n<meta name=\"keywords\" content=\"Keywords\"> ‚Äì Supplies SEO keywords\n<meta name=\"robots\" content=\"index, follow\"> ‚Äì Guides search engine indexing\n<meta name=\"googlebot\" content=\"index, follow\"> ‚Äì Specific for Googlebot\n\nAttributes for HTML Tags\nAttributes provide additional information for HTML elements. Here are some common examples:\n<p id=\"my-id\" class=\"my-class\">Hello World</p><img src=\"image.jpg\" alt=\"Descriptive image text\"><a href=\"https://www.google.com\">Visit Google</a><input type=\"text\" placeholder=\"Enter your name\"><button>Click me</button>\n\nid=\"my-id\" - Adds an id attribute with the value my-id\n.my-class - Adds a class attribute with the value my-class\nsrc=\"image.jpg\" - Adds a src attribute with the value image.jpg\nalt=\"Image\" - Adds an alt attribute with the value Image\nhref=\"https://www.google.com\" - Adds a href attribute with the value https://www.google.com\ntype=\"text\" - Adds a type attribute with the value text\nplaceholder=\"Enter your name\" - Adds a placeholder attribute with the value Enter your name\n\nSome attributes are global attributes and can be used on any HTML tag. Some attributes are specific to certain tags and can only be used with that tag. For example, the href attribute is a specific attribute for the <a> tag, and the title attribute is a global attribute that can be used on any HTML tag.\nHTML5 attributes\nSome examples of HTML5 attributes are:\n\nautofocus - Adds an autofocus attribute to an input field\nrequired - Adds a required attribute to an input field\nreadonly - Adds a readonly attribute to an input field\nsection - Adds a section attribute to a section element\nfooter - Adds a footer attribute to a footer element\n\n\nfooter, section, and header are new HTML5 attributes. They are used to define the structure of a web page. Fundamentally, they are used to group related content together, just like the <div> tag is used to group related content together.\n\nHTML5 tags\n\n<header> - Header\n<footer> - Footer\n<nav> - Navigation\n<main> - Main\n<article> - Article\n<section> - Section\n<aside> - Aside\n<details> - Details\n<summary> - Summary\n<time> - Time\n<mark> - Mark\n<meter> - Meter\n<progress> - Progress\n<video> - Video\n<audio> - Audio\n<source> - Source\n\nConclusion\nYou don‚Äôt need to do a PhD in HTML to be a web developer. You just need to know the basics and get out of here ASAP. HTML5 just adds a few new tags and attributes to HTML. Rest all the stuff like Web APIs (local storage, session storage, etc.) are just JavaScript stuff. You can learn them later.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousEmmet Crash CourseNext Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúChai aur Git‚Äù series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n Play  \nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousCommon HTML TagsNext Git and GitHub  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/introduction/",
    "content": " Git and GitHub   Let‚Äôs start with the basics. Git is a version control system that allows you to track changes to your files and collaborate with others. It is used to manage the history of your code and to merge changes from different branches. I can understand that as of now these terms like version control, branches, and merges are not familiar to you. But don‚Äôt worry, we will learn them in this tutorial.\nGit and Github are different\nGit is a version control system that is used to track changes to your files. It is a free and open-source software that is available for Windows, macOS, and Linux. Remember, GIT is a software and can be installed on your computer.\nGithub is a web-based hosting service for Git repositories. Github is an online platform that allows you to store and share your code with others. It is a popular platform for developers to collaborate on projects and to share code. It is not that Github is the only provider of Git repositories, but it is one of the most popular ones.\nA little on version control systems\nVersion control systems are used to manage the history of your code. They allow you to track changes to your files and to collaborate with others. Version control systems are essential for software development. Consider version control as a checkpoint in game. You can move to any time in the game and you can always go back to the previous checkpoint. This is the same concept in software development.\nBefore Git became mainstream, version control systems were used by developers to manage their code. They were called SCCS (Source Code Control System). SCCS was a proprietary software that was used to manage the history of code. It was expensive and not very user-friendly. Git was created to replace SCCS and to make version control more accessible and user-friendly. Some commong version control systems are Subversion (SVN), CVS, and Perforce.\nLearning Path\nIn this tutorial, we will learn the basics of Git and Github. We will start with the basics and then move on to more advanced topics. We will also learn how to use Git and Github for collaboration and version control. By the end of this tutorial, you will have a good understanding of Git and Github and will be able to use them to manage your code effectively.\nWe will go in this jounney something like this:\n\nGet the basics\nUse it daily\nFace the problems\nSolve them\nLearn more\n\n\nWe will focus more on Git first, once you understand git, moving towards Github will be easy.\n\nInstall Git\nTo install Git, you can use command line or you can visit official website and download the installer for your operating system. Git is available for Windows, macOS, and Linux and is available at https://git-scm.com/downloads.\nAccount on Github\nAnother step that you have to follow is to create an account on Github. I will later walk you through the process of linking your Github account with your Machine. You cannot push your code to Github without ssh-key setup. Password authentication is not recommended and these days it is not possible to use it. So, you need to setup ssh-key authentication. We will cover that in a later part of the tutorial.\nConclusion\nIn this part, we have learned the basics of Git and Github. We have also learned how to install Git and Github. We have also learned about the importance of version control systems and how they are used in software development.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext Terminology  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/terminology/",
    "content": " Terminology   Git and people who use it talk in a different terminology. For example they don‚Äôt call it a folder, they call it a repository. They don‚Äôt call it alternative timeline, they call it branch. Although, I agree that alternative timeline is a better name for it. üòÅ\nCheck your git version\nTo check your git version, you can run the following command:\nTerminal windowgit --version\nThis command will display the version of git installed on your system. Git is a very stable software and don‚Äôt get any breaking changes in majority of the cases, at least in my experience.\nRepository\nA repository is a collection of files and directories that are stored together. It is a way to store and manage your code. A repository is like a folder on your computer, but it is more than just a folder. It can contain other files, folders, and even other repositories. You can think of a repository as a container that holds all your code.\nThere is a difference between a software on your system vs tracking a particular folder on your system. At any point you can run the following command to see the current state of your repository:\nTerminal windowgit status\n\nNot all folders are meant to be tracked by git. Here we can see that all green folders are projects are getting tracked by git but red ones are not.\nYour config settings\nGithub has a lot of settings that you can change. You can change your username, email, and other settings. Whenever you checkpoint your changes, git will add some information about your such as your username and email to the commit. There is a git config file that stores all the settings that you have changed. You can make settings like what editor you would like to use etc. There are some global settings and some repository specific settings.\nLet‚Äôs setup your email and username in this config file. I would recommend you to create an account on github and then use the email and username that you have created.\nTerminal windowgit config --global user.email \"your-email@example.com\"git config --global user.name \"Your Name\"\nNow you can check your config settings:\nTerminal windowgit config --list\nThis will show you all the settings that you have changed.\nCreating a repository\nCreating a repository is a process of creating a new folder on your system and initializing it as a git repository. It‚Äôs just regular folder to code your project, you are just asking git to track it. To create a repository, you can use the following command:\nTerminal windowgit statusgit init\ngit status command will show you the current state of your repository. git init command will create a new folder on your system and initialize it as a git repository. This adds a hidden .git folder to your project.\nCommit\ncommit is a way to save your changes to your repository. It is a way to record your changes and make them permanent. You can think of a commit as a snapshot of your code at a particular point in time. When you commit your changes, you are telling git to save them in a permanent way. This way, you can always go back to that point in time and see what you changed.\nUsual flow looks like this:\n\nComplete git flow\nA complete git flow, along with pushing the code to github looks like this:\n\nWhen you want to track a new folder, you first use init command to create a new repository. Then you can use add command to add the folder to the repository. After that you can use commit command to save the changes. Finally you can use push command to push the changes to github. Of course there is more to it but this is the basic flow.\nStage\nStage is a way to tell git to track a particular file or folder. You can use the following command to stage a file:\nTerminal windowgit initgit add <file> <file2>git status\nHere we are initializing the repository and adding a file to the repository. Then we can see that the file is now being tracked by git. Currently our files are in staging area, this means that we have not yet committed the changes but are ready to be committed.\nCommit\nTerminal windowgit commit -m \"commit message\"git status\nHere we are committing the changes to the repository. We can see that the changes are now committed to the repository. The -m flag is used to add a message to the commit. This message is a short description of the changes that were made. You can use this message to remember what the changes were.\nMissing the -m flag will result in an action that opens your default settings editor, which is usually VIM. We will change this to vscode in the next section.\nLogs\nTerminal windowgit log\nThis command will show you the history of your repository. It will show you all the commits that were made to the repository. You can use the --oneline flag to show only the commit message. This will make the output more compact and easier to read.\n‚òïÔ∏è - Check git log docs\n\nAtomic commits are a way to make sure that each commit is a self-contained unit of work. This means that if one commit fails, you can always go back to a previous commit and fix the issue. This is important for maintaining a clean and organized history in your repository.\n\nchange default code editor\nYou can change the default code editor in your system to vscode. To do this, you can use the following command:\nTerminal windowgit config --global core.editor \"code --wait\"\ngitignore\nGitignore is a file that tells git which files and folders to ignore. It is a way to prevent git from tracking certain files or folders. You can create a gitignore file and add list of files and folders to ignore by using the following command:\nExample:\n.gitignorenode_modules.env.vscode\nNow, when you run the git status command, it will not show the node_modules and .vscode folders as being tracked by git.\nConclusion\nIn this section, we have learned about the basics of git and how to use it to track changes to your files and folders. We have also learned about the different commands that you can use to interact with your repository, such as init, add, commit, log, etc By the end of this section, you should have a good understanding of how to use git and how to use it effectively to manage your code.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousGit and GitHubNext Behind the scenes  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/behind-the-scenes/",
    "content": " Git behind the scenes   Git is a version control system that allows you to track changes to your files and folders. It is a powerful tool that can help you manage your code more effectively. In this section, we will explore the basics of how git works internally.\nGit Snapshots\nA git snapshot is a point in time in the history of your code. It represents a specific version of your code, including all the files and folders that were present at that time. Each snapshot is identified by a unique hash code, which is a string of characters that represents the contents of the snapshot.\nA snapshot is not an image, it‚Äôs just a representation of the code at a specific point in time. Snapshot is a loose term that is used when git stores information about the code in a locally stored key-value based database. Everything is stored as an object and each object is identified by a unique hash code.\n3 Musketeers of Git\nThe three musketeers of git are:\n\nCommit Object\nTree Object\nBlob Object\n\nCommit Object\nEach commit in the project is stored in .git folder in the form of a commit object. A commit object contains the following information:\n\nTree Object\nParent Commit Object\nAuthor\nCommitter\nCommit Message\n\nTree Object\nTree Object is a container for all the files and folders in the project. It contains the following information:\n\nFile Mode\nFile Name\nFile Hash\nParent Tree Object\n\nEverything is stored as key-value pairs in the tree object. The key is the file name and the value is the file hash.\nBlob Object\nBlob Object is present in the tree object and contains the actual file content. This is the place where the file content is stored.\n\nHelpful commands\nHere are some helpful commands that you can use to explore the git internals:\nTerminal windowgit show -s --pretty=raw <commit-hash>\nGrab tree id from the above command and use it in the following command to get the tree object:\nTerminal windowgit ls-tree <tree-id>\nGrab tree id from the above command and use it in the following command to get the blob object:\nTerminal windowgit show <blob-id>\nGrab tree id from the above command and use it in the following command to get the commit object:\nTerminal windowgit cat-file -p <commit-id>\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousTerminologyNext Branches in Git  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/branches/",
    "content": " Branches in Git   Branches are a way to work on different versions of a project at the same time. They allow you to create a separate line of development that can be worked on independently of the main branch. This can be useful when you want to make changes to a project without affecting the main branch or when you want to work on a new feature or bug fix.\n\nSome developers can work on Header, some can work on Footer, some can work on Content, and some can work on Layout. This is a good example of how branches can be used in git.\nHEAD in git\nThe HEAD is a pointer to the current branch that you are working on. It points to the latest commit in the current branch. When you create a new branch, it is automatically set as the HEAD of that branch.\n\nthe default branch used to be master, but it is now called main. There is nothing special about main, it is just a convention.\n\nCreating a new branch\nTo create a new branch, you can use the following command:\nTerminal windowgit branchgit branch bug-fixgit switch bug-fixgit loggit switch maingit switch -c dark-modegit checkout orange-mode\nSome points to note:\n\ngit branch - This command lists all the branches in the current repository.\ngit branch bug-fix - This command creates a new branch called bug-fix.\ngit switch bug-fix - This command switches to the bug-fix branch.\ngit log - This command shows the commit history for the current branch.\ngit switch main - This command switches to the main branch.\ngit switch -c dark-mode - This command creates a new branch called dark-mode. the -c flag is used to create a new branch.\ngit checkout orange-mode - This command switches to the orange-mode branch.\n\n\nCommit before switching to a branch \nGo to .git folder and checkout to the HEAD file\n\nMerging branches\n\nMerging is about bringing changes from one branch to another.\nIn Git we have two types of merges :\n\nFast-Forward Merges (If branches have not diverged)\n3-Way Merges (if branches have diverged)\n\n\n\nFast-forward merge\nThis one is easy as branch that you are trying to merge is usually ahead and there are no conflicts.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal windowgit checkout maingit merge bug-fix\n\nSome points to note:\n\ngit checkout main - This command switches to the main branch.\ngit merge bug-fix - This command merges the bug-fix branch into the main branch.\n\nThis is a fast-forward merge. It means that the commits in the bug-fix branch are directly merged into the main branch. This can be useful when you want to merge a branch that has already been pushed to the remote repository.\n3 Way merge\n\nIn this type of merge, the main branch has additional commits that are not present in the bug-fix branch. This is not a fast-forward merge. Here git looks at 3 different commits [common ancestor of branches + tips of each branch] and combines the changes into one merge commit.\nWhen you are done working on a branch, you can merge it back into the main branch. This is done using the following command:\nTerminal windowgit checkout maingit merge bug-fix\nIf the command are same, what is the difference between fast-forward and not fast-forward merge?\nThe difference is resolving the conflicts. In a fast-forward merge, there are no conflicts. But in a not fast-forward merge, there are conflicts, and there are no shortcuts to resolve them.\nYou have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts.\n\nManaging conflicts\nThere is no magic button to resolve conflicts. You have to manually resolve the conflicts. Decide, what to keep and what to discard. VSCode has a built-in merge tool that can help you resolve the conflicts. I personally use VSCode merge tool. Github also has a merge tool that can help you resolve the conflicts but most of the time I handle them in VSCode and it gives me all the options to resolve the conflicts.\nOverall it sounds scary to beginners but it is not, it‚Äôs all about communication and understanding the code situation with your team members.\nRename a branch\nYou can rename a branch using the following command:\nTerminal windowgit branch -m <old-branch-name> <new-branch-name>\nDelete a branch\nYou can delete a branch using the following command:\nTerminal windowgit branch -d <branch-name>\nCheckout a branch\nYou can checkout a branch using the following command:\nTerminal windowgit checkout <branch-name>\nCheckout a branch means that you are going to work on that branch. You can checkout any branch you want.\nList all branches\nYou can list all branches using the following command:\nTerminal windowgit branch\nList all branches means that you are going to see all the branches in your repository.\nConclusion\nIn this section, we have learned about the different types of merges and how to resolve conflicts. We have also learned about the importance of branching and merging in Git and Github.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousBehind the scenesNext Diff, Stash, Tags  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/diff-stash-tags/",
    "content": " Diff, Stash and Tags   This guide will help you understand the different commands related to diff, tags and stash in git. These are not main stream commands but they are very useful in certain situations.\nGit diff\nThe git diff is an informative command that shows the differences between two commits. It is used to compare the changes made in one commit with the changes made in another commit. Git consider the changed versions of same file as two different files. Then it gives names to these two files and shows the differences between them.\nHow to Read the Diff Output\n\na/ ‚Äì the original file (before changes)\nb/ ‚Äì the updated file (after changes)\n--- ‚Äì marks the beginning of the original file\n+++ ‚Äì marks the beginning of the updated file\n@@ ‚Äì shows the line numbers and position of changes\n\nHere the file A and file B are the same file but different versions.\nGit will show you the changes made in the file A and file B. It will also show you the line number where the change occurred along with little preview of the change.\nComparing Working Directory and Staging Area\nTerminal windowgit diff\nThis command shows the unstaged changes in your working directory compared to the staging area. This command alone will not show you the changes made in the file A and file B, you need to provide options to show the changes.\nComparing Staging Area with Repository\nTerminal windowgit diff --staged\nThis command shows the changes between your last commit and the staging area (i.e., changes that are staged and ready to be committed).\nComparing Two Branches\nTerminal windowgit diff <branch-name-one> <branch-name-two>\nThis command compares the difference between two branches.\nAnother way to compare the difference between two branches is to use the following command:\nTerminal windowgit diff branch-name-one..branch-name-two\nComparing Specific Commits:\nTerminal windowgit diff <commit-hash-one> <commit-hash-two>\nThis command compares the difference between two commits.\nGit Stash\nStash is a way to save your changes in a temporary location. It‚Äôs useful when switching branches without losing work. You can then come back to the file later and apply the changes.\n\nConflicting changes will not allow you to switch branches without committing the changes. Another alternative is to use the git stash command to save your changes in a temporary location.\n\nTerminal windowgit stash\nThis command saves your changes in a temporary location. It is like a stack of changes that you can access later.\nNaming the stash\nYou can also name the stash by using the following command:\nTerminal windowgit stash save \"work in progress on X feature\"\nView the stash list\nYou can view the list of stashes by using the following command:\nTerminal windowgit stash list\nApply the Most Recent Stash\nYou can apply the stash by using the following command:\nTerminal windowgit stash apply\nApply Specific Stash\nYou can apply the specific stash by using the following command:\nTerminal windowgit stash apply stash@{0}\nHere stash@{0} is the name of the stash. You can use the git stash list command to get the name of the stash.\nApplying and Drop a Stash\nYou can apply and drop the stash by using the following command:\nTerminal windowgit stash pop\nThis command applies the stash and drops it from the stash list.\nDrop the stash\nYou can drop the stash by using the following command:\nTerminal windowgit stash drop\nApplying stash to a specific branch\nYou can apply the stash to a specific branch by using the following command:\nTerminal windowgit stash apply stash@{0} <branch-name>\nClearing the stash\nYou can clear the stash by using the following command:\nTerminal windowgit stash clear\nGit Tags\nTags are a way to mark a specific point in your repository. They are useful when you want to remember a specific version of your code or when you want to refer to a specific commit. Tags are like sticky notes that you can attach to your commits.\nCreating a tag\nYou can create a tag using the following command:\nTerminal windowgit tag <tag-name>\nThis command creates a new tag with the specified name. The tag will be attached to the current commit.\nCreate an annotated tag\nYou can create an annotated tag using the following command:\nTerminal windowgit tag -a <tag-name> -m \"Release 1.0\"\nThis command creates an annotated tag with the specified name and message. The tag will be attached to the current commit.\nList all tags\nYou can list all tags using the following command:\nTerminal windowgit tag\nThis command lists all the tags in your repository.\nTagging a specific commit\nYou can tag a specific commit using the following command:\nTerminal windowgit tag <tag-name> <commit-hash>\nPush tags to remote repository\nYou can push tags to a remote repository using the following command:\nTerminal windowgit push origin <tag-name>\nDelete a tag\nYou can delete a tag using the following command:\nTerminal windowgit tag -d <tag-name>\nDelete tag on remote repository\nYou can delete a tag on a remote repository using the following command:\nTerminal windowgit push origin :<tag-name>\nConclusion\nIn this section, we explored how to use Git‚Äôs diff, stash, and tags commands. Though not used as frequently as add, commit, or push, they are incredibly helpful in debugging, context switching, and release management. See you next tutorial.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousBranches in GitNext Managing History  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/managing-history/",
    "content": " Managing History   This guide will help you understand how to manage your Git history effectively.\nMerge commits\nA merge commit is a commit that combines two or more commits into one. It is created when you merge two or more branches into a single branch. The merge commit contains all the changes from the original branches, and it is used to keep the project history clean and easy to understand.\n\nRebase in git\nGit rebase is a powerful Git feature used to change the base of a branch. It effectively allows you to move a branch to a new starting point, usually a different commit, by ‚Äúreplaying‚Äù the commits from the original base onto the new base. This can be useful for keeping a cleaner, linear project history.\nSome people like to use rebase over the merge command because it allows you to keep the commit history cleaner and easier to understand. It also allows you to make changes to the code without affecting the original branch.\nHere‚Äôs a flow example of using git rebase with all the commands involved:\nSuppose you have a feature branch called feature-branch that you want to rebase onto the main branch.\n\nEnsure you are on the branch you want to rebase\nTerminal windowgit checkout feature-branchgit rebase main\nThis will replay the commits from feature-branch on top of the latest changes in main.\nResolve any conflicts\nIf there are any conflicts, you will need to resolve them manually. You can use the merge tool in VSCode to resolve the conflicts.\nTerminal windowgit add <resolved-files>git rebase --continue\n\nTry to avoid ‚Äîforce option when using rebase. It can cause issues with the project history. I have seen many horror stories of people using ‚Äîforce to fix conflicts.\n\nGit reflog\nGit reflog is a command that shows you the history of your commits. It allows you to see the changes that you have made to your repository over time. This can be useful for debugging and understanding the history of your project.\nView the reflog:\nTerminal windowgit reflog\nThis will show you the history of your commits. You can use the number at the end of each line to access the commit that you want to view.\nFind specific commit\nYou can find a specific commit using the following command:\nTerminal windowgit reflog <commit-hash>\nRecover lost commits or changes\nIf you accidentally deleted a branch or made changes that are no longer visible in the commit history, you can often recover them using the reflog. First, find the reference to the commit where the branch or changes existed, and then reset your branch to that reference.\nTerminal windowgit reflog <commit-hash>git reset --hard <commit-hash>\nor you can use HEAD@{n} to reset to the nth commit before the one you want to reset to.\nTerminal windowgit reflog <commit-hash>git reset --hard HEAD@{1}\nConclusion\nIn this guide, we‚Äôve covered important aspects of managing Git history through rebase and reflog. We‚Äôve learned how rebase can help maintain a cleaner, more linear project history, and how reflog can help recover lost commits or changes.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousDiff, Stash, TagsNext Collaborate with Github  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-git/github/",
    "content": " About Github   This guide will help you get started with Github.\nWhat is Github?\nGithub is a web-based Git repository hosting service. It is a popular platform for developers to collaborate on projects and to share code. Github provides a user-friendly interface for managing and tracking changes to your code, as well as a platform for hosting and sharing your projects with others.\nSome other alternative of Github are:\n\nGitlab\nBitbucket\nAzure Repos\nGitea\n\nBut mainstream popular tool these days is Github.\nGithub Account\nCreating a Github account is free and easy. You can create an account by visiting the Github website and clicking on the ‚ÄúSign up‚Äù button. You will be prompted to enter your email address and password, and then you will be redirected to the Github homepage.\nOnce you have created an account, you can start using Github to host and collaborate on your projects. Github provides a variety of features and tools that make it easy to manage and track your code, including issues, pull requests, and code reviews.\nConfiguring Git\nIf you haven‚Äôt done it already, you need to configure your git config file. You can do this by running the following command:\nTerminal windowgit config --global user.email \"your-email@example.com\"git config --global user.name \"Your Name\"\nThis will set your email and name as your global settings. You can change these settings at any time by running the same command again.\nNow you can check your config settings:\nTerminal windowgit config --list\nThis will show you all the settings that you have changed.\nSetup SSH Key\nIf you haven‚Äôt done it already, you need to setup ssh key and add it to your github account. You can do this by following the instructions on the Github website.\nYou can find the exact steps on the website for both Windows and MacOS. The steps are same for both, only apple users need to add the ssh key to their keychain.\n\n\nGenerate a new SSH key\nTo generate a new SSH key, open the terminal and run the following command:\nTerminal windowssh-keygen -t ed25519 -C \"your-email@chaicode.com\"\nHere ed25519 is the type of key that you are generating. This creates a new SSH key, using the provided email as label.\n\n\nSave the key\nAfter generating the key, you need to save it to your computer. You can do this by running the following command:\n\nEnter a file in which to save the key (/Users/YOU/.ssh/id_ALGORITHM): [Press enter]\n\nAt the prompt you can enter passphrase for the key or you can leave it blank. If you leave it blank, the key will be saved without a passphrase.\n\n\nAdd key to your ssh-agent\nAfter saving the key, you need to add it to your ssh-agent. You can do this by running the following command:\nHere it is best to refer above link for more information, as Github has a lot of information on this. There is no point in repeating it here.\n\n\nAdd key to github\nUse the web ui to add the key to your github account. You can do this by following the instructions on the Github website.\n\n\nPublish Code to Remote Repository\nNow that you have setup your ssh key and added it to your github account, you can start pushing your code to the remote repository.\nCreate a new Repo on your system first, add some code and commit it.\nTerminal windowgit initgit add <files>git commit -m \"commit message\"\nRemote URL Setting\nYou can check the remote url setting by running the following command:\nTerminal windowgit remote -v\nThis will show you the remote url of your repository.\nAdd Remote Repository\nYou can add a remote repository by running the following command:\n\ngit remote add origin <remote-url>\n\nHere <remote-url> is the url of the remote repository that you want to add and origin is the name of the remote repository. This origin is used to refer to the remote repository in the future.\nTerminal windowgit remote add origin https://github.com/hiteshchoudhary/chai-something.git\nPushing Code\n\ngit push remote-name branch-name\n\nHere remote-name is the name of the remote repository that you want to push to and branch-name is the name of the branch that you want to push.\nTerminal windowgit push origin main\nSetup an upstream remote\nSetting up an upstream remote is useful when you want to keep your local repository up to date with the remote repository. It allows you to fetch and merge changes from the remote repository into your local repository.\nTo set up an upstream remote, you can use the following command:\nTerminal windowgit remote add upstream <remote-url>\nor you can use shorthand:\nTerminal windowgit remote add -u <remote-url>\nYou can do this at the time of pushing your code to the remote repository.\nTerminal windowgit push -u origin main\nThis will set up an upstream remote and push your code to the remote repository.\nThis will allow you to run future commands like git pull and git push without specifying the remote name.\nGet code from remote repository\nThere are two ways to get code from a remote repository:\n\nfetch the code\npull the code\n\nFetch the code means that you are going to download the code from the remote repository to your local repository. Pull the code means that you are going to download the code from the remote repository and merge it with your local repository.\n\nFetch code\nTo fetch code from a remote repository, you can use the following command:\nTerminal windowgit fetch <remote-name>\nHere <remote-name> is the name of the remote repository that you want to fetch from.\nPull code\nTo pull code from a remote repository, you can use the following command:\nTerminal window# git pull <remote-name> <branch-name>git pull origin main\nHere <remote-name> is the name of the remote repository that you want to pull from and <branch-name> is the name of the branch that you want to pull.\nConclusion\nIn this section, we have learned about Github and how to use it. We have also learned about how to setup ssh key and add it to your github account. We have also learned about how to publish code to the remote repository.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousManaging HistoryNext Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúChai aur C++‚Äù series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\nHindi Play  \nEnglish Play  \nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousCollaborate with GithubNext C++ Intro  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/introduction/",
    "content": " Introduction   In this chapter, we will get familiar with the C++ language and its features. We will learn about the C++ standard library and some of its most commonly used classes and functions.\nWhat is C++?\nC++ is a general-purpose programming language that was developed by Bjarne Stroustrup in the 1980s. It is an extension of the C programming language and is designed to be more efficient, powerful, and easier to use. C++ is used for developing a wide range of applications, including operating systems, games, and scientific simulations.\nWhy C++?\nC++ is a powerful language that offers several advantages over C:\n\nPerformance: C++ is generally faster than C, especially for tasks that require high performance.\nMemory Management: C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\nObject-Oriented Programming: C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\nStandardization: C++ is part of the C++ standard library, which provides a set of classes and functions that can be used to develop applications.\n\nC++ Syntax\nC++ code is written in a similar way to C code, but with some additional features. Here are some key differences between C and C++:\n\nPreprocessor Directives: In C, preprocessor directives are used to include header files and perform other tasks. In C++, preprocessor directives are used to perform compile-time operations.\nNamespaces: In C++, namespaces are used to organize code into logical groups and provide a way to avoid naming conflicts.\nClasses and Objects: In C, classes are used to define objects with their own data and functions. In C++, classes are used to define objects with their own data and functions, and objects are created from classes.\nInheritance: In C, inheritance is achieved through the use of pointers and casting. In C++, inheritance is achieved through the use of classes and objects.\n\nC++ Features\nC++ offers several features that make it a powerful language for developing applications:\n\nObject-Oriented Programming: C++ supports object-oriented programming, which allows for the creation of modular and reusable code.\nPlatform-Independence: C++ is platform-independent, which means that the same code can be compiled and run on different platforms without modifications.\nMemory Management: C++ provides automatic memory management, which helps prevent memory leaks and other memory-related issues.\nStatically Typed: C++ is statically typed, which means that the type of a variable is determined at compile-time.\nSpeed: C++ is generally a faster language, especially for tasks that require high performance.\nPointers and References: C++ supports pointers and references, which allow for more efficient memory management and manipulation.\n\nHistory of C++\nC++ was developed by Bjarne Stroustrup as a thesis project in the late 1980s. In his Ph.D. thesis, Stroustrup tried Simula to inject Object Oriented Programming (OOP) into the language. However, he found that the language was too complex and difficult to use, so he decided to develop his own language.\nThe first version of C++ was released in 1989, and it was called ‚ÄúC with Classes‚Äù. It was a significant departure from C, as it introduced classes and objects, which allowed for more modular and reusable code. C++ quickly gained popularity and became the de facto standard for C programming.\nOver the years, C++ has evolved and gained new features and improvements. It has become a powerful language for developing a wide range of applications, including operating systems, games, and scientific simulations.\nC++ over the years\nC++ has undergone several major revisions and improvements over the years. Some of the key changes include:\n\nC++98: C++98 was released in 1998 and introduced several new features, such as the use of namespaces, templates, and exceptions.\nC++03: C++03 was released in 2003 and introduced several new features, such as the use of rvalue references, move semantics, and the new standard library.\nC++11: C++11 was released in 2011 and introduced several new features, such as the use of lambda expressions, the new standard library, and the introduction of the auto keyword.\nC++14: C++14 was released in 2014 and introduced several new features, such as the use of the constexpr keyword, the introduction of the std::experimental namespace, and the introduction of the std::string_view class.\nC++17: C++17 was released in 2017 and introduced several new features, such as the use of the std::any class, the introduction of the std::optional class, and the introduction of the std::variant class.\nC++20: C++20 is currently in development and is expected to introduce several new features, such as the introduction of the std::span class, the introduction of the std::string_view class, and the introduction of the std::bit class.\n\nC++ Compilers\nC++ compilers are software tools that are used to compile C++ code into machine code that can be executed by a computer. Some popular C++ compilers include:\n\nGCC: GCC is a popular open-source C++ compiler that is used to compile C++ code on Linux and other Unix-like operating systems.\nClang: Clang is a popular open-source C++ compiler that is used to compile C++ code on macOS and other Unix-like operating systems.\nMSVC: MSVC is a popular open-source C++ compiler that is used to compile C++ code on Windows.\n\nC++ IDEs\nC++ IDEs are software tools that are used to develop C++ applications. Some popular C++ IDEs include:\n\nVisual Studio: Visual Studio is a popular integrated development environment (IDE) for C++ development on Windows.\nCode::Blocks: Code::Blocks is a free and open-source IDE for C++ development on Windows.\nEclipse: Eclipse is a popular open-source IDE for C++ development on Linux and other Unix-like operating systems.\nCLion: CLion is a commercial IDE for C++ development on Windows and macOS.\nVS Code: VS Code is what we will use in this course, with some extensions to make it easier to use.\n\nC++ Standard Library\nThe C++ standard library provides a set of classes and functions that can be used to develop applications. Some of the most commonly used classes and functions in the C++ standard library include:\n\nStrings: The string class is used to store and manipulate strings.\nVectors: The vector class is used to store and manipulate dynamic arrays.\nMaps: The map class is used to store and manipulate key-value pairs.\nAlgorithms: The algorithm library provides a set of functions for performing common operations on containers, such as sorting and searching.\nInput/Output: The iostream library provides classes and functions for performing input and output operations.\n\nSummary\nIn this chapter, we have learned about C++ and its syntax. We have also learned about the C++ standard library and some of its most commonly used classes and functions.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext First Program in C++  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/hello-world/",
    "content": " Hello World   In this chapter, we will learn how to write a simple ‚ÄúHello World‚Äù program in C++. We will start by writing a program that prints ‚ÄúHello World‚Äù to the console, and then we will add some comments and formatting to make the code more readable.\nWriting Hello World\nTo write a ‚ÄúHello World‚Äù program in C++, we need to create a new hello.cpp file and write the following code:\nhello.cpp#include <iostream>using namespace std;\nint main() { cout << \"Hello World!\" << endl; return 0;}\nLet‚Äôs break down the code:\n\n#include <iostream>: This line includes the iostream header file, which provides input and output functionality.\nint main(): This line defines the main function, which is the entry point of the program. furthermore, it specifies the return type of the function as int. The int data type is used to represent integers and this function returns an integer value.\nusing namespace std;: This line allows us to use the cout object from the std namespace without having to prefix it with std::. The concept of namespace is important in C++ and it helps to avoid naming conflicts. In this case, we are using the cout & endl object from the std namespace.\ncout << \"Hello World!\" << endl;: This line prints the string ‚ÄúHello World!‚Äù to the console. endl is a manipulator that adds a newline character to the output.\nreturn 0;: This line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nCompiling Hello World\nTo compile the ‚ÄúHello World‚Äù program, we need to use a C++ compiler. A C++ compiler is a software tool that translates the C++ code into machine code that can be executed by a computer. You can use runner extension in VS Code to compile and run the code.\nRunning Hello World\nTo run the ‚ÄúHello World‚Äù program, we need to compile it and then run the compiled executable. Here are the steps to do this:\n\n\nOpen a terminal.\n\n\nNavigate to the directory where the ‚ÄúHello World‚Äù program is saved.\n\n\nCompile the program using the following command:\nTerminal windowg++ hello.cpp -o hello\nOR you can use runner extension in VS Code to compile and run the code.\n\n\nRun the program using the following command:\nTerminal window./hello\n\n\nThe program should print ‚ÄúHello World!‚Äù to the console.\n\n\nHello World with Comments\nNow that we have written a ‚ÄúHello World‚Äù program, let‚Äôs add some comments to make the code more readable. Here‚Äôs the updated code:\nhello.cpp#include <iostream>using namespace std;\nint main() { // Print \"Hello World!\" to the console cout << \"Hello World!\" << endl; return 0;}\nIn above code:\n\nThe // symbol is used to add comments to the code.\nComments are ignored by the compiler and are only meant for human readers.\n\nSummary\nIn this chapter, we have learned how to write a simple ‚ÄúHello World‚Äù program in C++. We have also learned how to compile and run the program.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousC++ IntroNext Variables & Constants  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/variables-and-constants/",
    "content": " Variables & Constants   In this chapter, we will learn about variables and constants in C++. We will start by learning about variables and how to declare and initialize them. Then, we will learn about constants and how to declare and initialize them.\nVariables and Constants\n\nVariables are used to store data in a program. They can be changed during the execution of the program.\nConstants, on the other hand, are used to store data that cannot be changed during the execution of the program. They are declared using the const keyword.\n\nHere‚Äôs an example of declaring and initializing a variable:\nvariable.cppint age = 25;\nIn this example, we declare a variable named age and initialize it with the value 25. The int keyword is used to declare the variable as an integer.\nHere‚Äôs an example of declaring and initializing a constant:\nconstant.cppconst double PI = 3.14159;\nIn this example, we declare a constant named PI and initialize it with the value 3.14159. The const keyword is used to declare the constant as a constant.\nCode used in Video\nvariable-and-constants.cpp#include <iostream>\nusing namespace std;\nint main(){\n  int score;  score = 110;\n  const int uid = 232323;\n  int hiteshBalance = 500;  hiteshBalance = 1000;\n  uid = 1223;\n  cout << \"Welcome to chai with cpp 1\" << endl ;  cout << \"Welcome to chai with cpp 2\" << endl ;  cout << \"Welcome to chai with cpp 3\" << endl ;\n  return 0;}\nGoing through the code\n\nThe int score; line declares a variable named score of type int.\nThe score = 110; line assigns the value 110 to the score variable.\nThe const int uid = 232323; line declares a constant named uid of type int and assigns the value 232323 to it.\nThe int hiteshBalance = 500; line declares a variable named hiteshBalance of type int and assigns the value 500 to it.\nThe hiteshBalance = 1000; line assigns the value 1000 to the hiteshBalance variable.\nThe uid = 1223; line assigns the value 1223 to the uid constant.\nThe cout << \"Welcome to chai with cpp 1\" << endl ; line prints the string ‚ÄúWelcome to chai with cpp 1‚Äù to the console.\nThe cout << \"Welcome to chai with cpp 2\" << endl ; line prints the string ‚ÄúWelcome to chai with cpp 2‚Äù to the console.\nThe cout << \"Welcome to chai with cpp 3\" << endl ; line prints the string ‚ÄúWelcome to chai with cpp 3‚Äù to the console.\n\nSummary\nIn this chapter, we have learned about variables and constants in C++. We have also learned how to declare and initialize variables and constants.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousFirst Program in C++Next Data Types  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/data-types/",
    "content": " Data Types   In this chapter, we will learn about data types in C++. We will start by learning about the basic data types in C++ and how to use them. Data types are used to define the type of data that a variable can hold. They are an important concept in programming and are used to ensure that the data is stored and used correctly.\nBasic Data Types\nC++ provides several basic data types that are used to define the type of data that a variable can hold. Some of the basic data types in C++ include:\n\nPrimitive Data Types: These are the basic data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\nDerived Data Types: These are the data types that are derived from other data types.\nUser-Defined Data Types: These are the data types that are defined by the user.\n\n\nIn this chapter, we will focus on the primitive data types and how to use them.\nPrimitive Data Types\nC++ provides several primitive data types that are used to define the type of data that a variable can hold. Some of the primitive data types in C++ include:\n\nint: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\nfloat: This is a floating-point data type that can hold values with a precision of 6 decimal places.\ndouble: This is a floating-point data type that can hold values with a precision of 15 decimal places.\nchar: This is a character data type that can hold a single character.\nbool: This is a boolean data type that can hold either true or false.\nvoid: This is a data type that is used to indicate that a function does not return a value.\n\nWe have some additional data types that are primitives but are less discussed from academic perspective. These include:\n\nshort: This is a signed integer data type that can hold values from -32768 to 32767.\nlong: This is a signed integer data type that can hold values from -2147483648 to 2147483647.\nlong long: This is a signed integer data type that can hold values from -9223372036854775808 to 9223372036854775807.\nunsigned char: This is an unsigned integer data type that can hold values from 0 to 255.\nunsigned short: This is an unsigned integer data type that can hold values from 0 to 65535.\nunsigned int: This is an unsigned integer data type that can hold values from 0 to 4294967295.\nunsigned long: This is an unsigned integer data type that can hold values from 0 to 4294967295.\nunsigned long long: This is an unsigned integer data type that can hold values from 0 to 18446744073709551615.\n\nCode Used in Video\nprimitive-data-types.cpp#include <iostream>using namespace std;\nint main(){  int teaLeaves = 50;  float waterTemperature = 85.588588;  double priceOfTea = 299.99;  char teaGrade = 'A';  bool isTeaReady = false;\n  cout << waterTemperature << endl;\n  return 0;}\nLet‚Äôs go through the code line by line:\n\nThe int teaLeaves = 50; line declares a variable named teaLeaves of type int and assigns the value 50 to it.\nThe float waterTemperature = 85.588588; line declares a variable named waterTemperature of type float and assigns the value 85.588588 to it.\nThe double priceOfTea = 299.99; line declares a variable named priceOfTea of type double and assigns the value 299.99 to it.\nThe char teaGrade = 'A'; line declares a variable named teaGrade of type char and assigns the value 'A' to it.\nThe bool isTeaReady = false; line declares a variable named isTeaReady of type bool and assigns the value false to it.\nThe cout << waterTemperature << endl; line prints the value of the waterTemperature variable to the console.\n\nModifier Code in Video\nmodifier-code.cpp#include <iostream>using namespace std;\nint main(){  unsigned smallTeaPack = 1200;  long long largeTeaStorage = 100000000;  short teaSample = 25;\n  cout << largeTeaStorage << endl;\n  return 0;}\nLet‚Äôs go through the code line by line:\n\nThe unsigned smallTeaPack = 1200; line declares a variable named smallTeaPack of type unsigned and assigns the value 1200 to it.\nThe long long largeTeaStorage = 100000000; line declares a variable named largeTeaStorage of type long long and assigns the value 100000000 to it.\nThe short teaSample = 25; line declares a variable named teaSample of type short and assigns the value 25 to it.\nThe cout << largeTeaStorage << endl; line prints the value of the largeTeaStorage variable to the console.\n\nString Code in Video\nstring.cpp#include <iostream>#include <string>using namespace std;\nint main(){  string favoriteTea = \"Lemon Tea \\t\";  string description = \"Known as \\\"best\\\" tea\";\n  cout << favoriteTea << description << endl;\n  return 0;}\nLet‚Äôs go through the code line by line:\n\nThe string favoriteTea = \"Lemon Tea \\t\"; line declares a variable named favoriteTea of type string and assigns the value \"Lemon Tea \\t\" to it.\nThe string description = \"Known as \\\"best\\\" tea\"; line declares a variable named description of type string and assigns the value \"Known as \\\"best\\\" tea\" to it.\nThe cout << favoriteTea << description << endl; line prints the value of the favoriteTea and description variables to the console.\n\nType Casting Code in Video\nType casting is the process of converting a value from one data type to another data type.\ntype-casting.cpp#include <iostream>using namespace std;\nint main(){  float teaPrice = 49.99;  int roundedTeaPrice = (int) teaPrice;\n  int teaQuantity = 2;  int totalPrice = teaPrice * teaQuantity;\n  cout << totalPrice << endl;\n  return 0;}\nLet‚Äôs go through the code line by line:\n\nThe float teaPrice = 49.99; line declares a variable named teaPrice of type float and assigns the value 49.99 to it.\nThe int roundedTeaPrice = (int) teaPrice; line declares a variable named roundedTeaPrice of type int and assigns the value 49 to it.\nThe int teaQuantity = 2; line declares a variable named teaQuantity of type int and assigns the value 2 to it.\nThe int totalPrice = teaPrice * teaQuantity; line declares a variable named totalPrice of type int and assigns the value 98 to it.\nThe cout << totalPrice << endl; line prints the value of the totalPrice variable to the console.\n\nUser input code in Video\nuser-input.cpp#include <iostream>#include <string>\nusing namespace std;\nint main(){  string userTea;  int teaQuantity;\n  cout << \"What would you like to order in tea? \\n\";  getline(cin, userTea);\n  //ask for quantity  cout << \"how many cups of \" << userTea << \"would you like to have ? \";  cin >> teaQuantity;\n  cout << teaQuantity;  cout << userTea;\n  return 0;}\nLet‚Äôs go through the code line by line:\n\n#include <string> line includes the string header file, which provides the string data type.\nThe string userTea; line declares a variable named userTea of type string and does not assign a value to it.\nThe int teaQuantity; line declares a variable named teaQuantity of type int and does not assign a value to it.\nThe cout << \"What would you like to order in tea? \\n\"; line prints the string ‚ÄúWhat would you like to order in tea?‚Äù to the console.\nThe getline(cin, userTea); line reads a line of input from the console and assigns it to the userTea variable.\nThe cout << \"how many cups of \" << userTea << \"would you like to have ? \"; line prints the string ‚Äúhow many cups of ‚Äù followed by the value of the userTea variable followed by the string ‚Äúwould you like to have ? ‚Äù to the console.\nThe cin >> teaQuantity; line reads an integer from the console and assigns it to the teaQuantity variable.\nThe cout << teaQuantity; line prints the value of the teaQuantity variable to the console.\nThe cout << userTea; line prints the value of the userTea variable to the console.\n\nSummary\nIn this chapter, we have learned about data types in C++. We have also learned about the primitive data types and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousVariables & ConstantsNext Operators  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/operators/",
    "content": " Operators   In this chapter, we will learn about operators in C++. We will start by learning about the different types of operators in C++ and how to use them. Operators are used to perform operations on variables and values.\nTypes of Operators\nC++ provides several types of operators that are used to perform operations on variables and values. Some of the types of operators in C++ include:\n\nArithmetic Operators: These are operators that are used to perform arithmetic operations on variables and values.\nAssignment Operators: These are operators that are used to assign values to variables.\nComparison Operators: These are operators that are used to compare values and determine if they are equal or not.\nLogical Operators: These are operators that are used to perform logical operations on variables and values.\nIncrement and Decrement Operators: These are operators that are used to increment or decrement the value of a variable.\nBitwise Operators: These are operators that are used to perform bitwise operations on variables and values.\n\n\n  Task Time  To learn these operators, we will use tasks based approach. Each task will help you to understand the requirements and then you will be able to implement the code. \nArithmetic Operators\nArithmetic operators are used to perform arithmetic operations on variables and values.\nTask\nCreate a program that calculates the total price of tea cups. The user inputs the number of cups they want and the price per cup. The program should calculate the total price, apply a 5% discount if the total is above a certain amount, and show the final price.\nSolution\narithmetic-operators.cpp#include <iostream>using namespace std;\nint main(){ int cups; double pricePerCup, totalPrice, discountedPrice;\n cout << \"Enter the number of tea cups: \"; cin >> cups; cout << \"Enter the price per cups: \"; cin >> pricePerCup;\n totalPrice = cups * pricePerCup;\n // apply 5% discount if total price is above 100 if (totalPrice > 100) {  discountedPrice = totalPrice - (totalPrice * 0.05);  cout << \"Discounted price is: \" << discountedPrice << endl; } else {  cout << \"Total price is \" << totalPrice << endl; }\n return 0;}\nGoing through the code:\n\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe double pricePerCup, totalPrice, discountedPrice; line declares three variables named pricePerCup, totalPrice, and discountedPrice of type double and does not assign a value to them.\nThe cout << \"Enter the number of tea cups: \"; line prints the string ‚ÄúEnter the number of tea cups: ‚Äù to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe cout << \"Enter the price per cups: \"; line prints the string ‚ÄúEnter the price per cups: ‚Äù to the console.\nThe cin >> pricePerCup; line reads a double from the console and assigns it to the pricePerCup variable.\nThe totalPrice = cups * pricePerCup; line calculates the total price by multiplying the cups and pricePerCup variables.\nThe if (totalPrice > 100) { line starts an if statement that checks if the totalPrice variable is greater than 100.\nThe discountedPrice = totalPrice - (totalPrice * 0.05); line calculates the discounted price by subtracting the totalPrice multiplied by 0.05 from the totalPrice variable.\nThe cout << \"Discounted price is: \" << discountedPrice << endl; line prints the string ‚ÄúDiscounted price is: ‚Äù followed by the value of the discountedPrice variable to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"Total price is \" << totalPrice << endl; line prints the string ‚ÄúTotal price is ‚Äù followed by the value of the totalPrice variable to the console.\nThe } line ends the if statement.\n\nAssignment Operators\nAssignment operators are used to assign values to variables.\nTask\nWrite a program that allows a user to input the number of tea bags they have. Assign additional bags to them based on certain conditions (e.g., if they have fewer than 10 bags, give them 5 extra). Update the original number using assignment operators.\nSolution\nassignment-operators.cpp#include <iostream>using namespace std;\nint main(){ int teaBags;\n cout << \"Enter the number of tea bags you have: \"; cin >> teaBags;\n if (teaBags < 10) {  // teaBags = teaBags + 5  teaBags += 5; } cout << \"Your total bags are: \" << teaBags;\n return 0;}\nGoing through the code:\n\nThe int teaBags; line declares a variable named teaBags of type int and does not assign a value to it.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string ‚ÄúEnter the number of tea bags you have: ‚Äù to the console.\nThe cin >> teaBags; line reads an integer from the console and assigns it to the teaBags variable.\nThe if (teaBags < 10) { line starts an if statement that checks if the teaBags variable is less than 10.\nThe // teaBags = teaBags + 5 line adds 5 to the teaBags variable.\nThe teaBags += 5; line adds 5 to the teaBags variable.\nThe } line ends the if statement.\nThe cout << \"Your total bags are: \" << teaBags; line prints the string ‚ÄúYour total bags are: ‚Äù followed by the value of the teaBags variable to the console.\n\nRelational Operators\nRelational operators are used to compare values and determine if they are equal or not.\nTask\nA tea shop offers a loyalty program. Customers who buy more than 20 cups of tea get a special ‚ÄúGold‚Äù badge, and those who buy 10 to 20 cups get a ‚ÄúSilver‚Äù badge. Write a program to display the badge they will receive based on the number of cups they buy.\nSolution\nrelational-operators.cpp#include <iostream>using namespace std;\nint main(){ int cups;\n cout << \"Enter the number of cups you have\"; cin >> cups;\n if (cups > 20) {  cout << \"You will get a GOLD badge\" << endl; } else if (cups >= 10 && cups <= 20) {  cout << \"You will get a SILVER badge\" << endl; } else {  cout << \"NO BADGE for you\" << endl; }\n return 0;}\nGoing through the code\n\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe cout << \"Enter the number of cups you have\"; line prints the string ‚ÄúEnter the number of cups you have‚Äù to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe if (cups > 20) { line starts an if statement that checks if the cups variable is greater than 20.\nThe cout << \"You will get a GOLD badge\" << endl; line prints the string ‚ÄúYou will get a GOLD badge‚Äù followed by a newline character to the console.\nThe } else if (cups >= 10 && cups <= 20) { line starts an else if block that is executed if the if statement is false.\nThe cout << \"You will get a SILVER badge\" << endl; line prints the string ‚ÄúYou will get a SILVER badge‚Äù followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"NO BADGE for you\" << endl; line prints the string ‚ÄúNO BADGE for you‚Äù followed by a newline character to the console.\nThe } line ends the if statement.\n\nLogical Operators\nLogical operators are used to perform logical operations on variables and values.\nTask\nCreate a program that checks if a user is eligible for a tea subscription discount. The discount applies if the user is either a student or has purchased more than 15 cups. Ask the user to input their status (student or not) and their cup count.\nSolution\nlogical-operators.cpp#include <iostream>using namespace std;\nint main(){ bool isStudent; int cups;\n cout << \"Are you a student (1 for yes and 0 for No) ?\"; cin >> isStudent; cout << \"How many cups of tea have you purchased ?\"; cin >> cups;\n if (isStudent || cups > 15) {  cout << \"You are elegible for a discount \" << endl; } else {  cout << \"You are NOT elegible for a discount \" << endl; }\n return 0;}\nGoing through the code\n\nThe bool isStudent; line declares a variable named isStudent of type bool and does not assign a value to it.\nThe int cups; line declares a variable named cups of type int and does not assign a value to it.\nThe cout << \"Are you a student (1 for yes and 0 for No) ?\"; line prints the string ‚ÄúAre you a student (1 for yes and 0 for No) ?‚Äù to the console.\nThe cin >> isStudent; line reads a boolean value from the console and assigns it to the isStudent variable.\nThe cout << \"How many cups of tea have you purchased ?\"; line prints the string ‚ÄúHow many cups of tea have you purchased ?‚Äù to the console.\nThe cin >> cups; line reads an integer from the console and assigns it to the cups variable.\nThe if (isStudent || cups > 15) { line starts an if statement that checks if the isStudent variable is true or if the cups variable is greater than 15.\nThe cout << \"You are elegible for a discount \" << endl; line prints the string ‚ÄúYou are elegible for a discount ‚Äù followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"You are NOT elegible for a discount \" << endl; line prints the string ‚ÄúYou are NOT elegible for a discount ‚Äù followed by a newline character to the console.\nThe } line ends the if statement.\n\nBitwise Operators\nBitwise operators are used to perform bitwise operations on variables and values. Bitwise operations are used to manipulate individual bits of a binary number. Decimal numbers are represented using binary numbers, which are made up of 1s and 0s. Bitwise operators are used to perform operations on these binary numbers.\nYou can learn more about bitwise operators by visiting Bitwisecmd.com.\nWe talked about it in the video, watch it for more information.\nSummary\nIn this chapter, we have learned about operators in C++. We have also learned about the different types of operators and how to use them. By the end of this chapter, you should have a good understanding of how to use operators in C++.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousData TypesNext Control Flow  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/control-flow/",
    "content": " Control Flow   In this chapter, we will learn about control flow in C++. We will start by learning about conditional statements and how to use them.\nHere we are using task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nIf Statement\nIf statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the if statement is not executed.\nTask\nWrite a program that checks if the user wants to order Green Tea. If the user types ‚ÄúGreen Tea,‚Äù the program should confirm their order.\nSolution\nif.cpp#include <iostream>#include <string>using namespace std;\nint main(){ string teaOrder;\n cout << \"Enter your tea order\"; getline(cin, teaOrder);\n if(teaOrder == \"Green Tea\"){  cout << \"You have ordered Green Tea\" << endl; }\n return 0;}\nGoing through the code\n\nThe string teaOrder; line declares a variable named teaOrder of type string and does not assign a value to it.\nThe cout << \"Enter your tea order\"; line prints the string ‚ÄúEnter your tea order‚Äù to the console.\nThe getline(cin, teaOrder); line reads a line of input from the console and assigns it to the teaOrder variable.\nThe if(teaOrder == \"Green Tea\"){ line starts an if statement that checks if the teaOrder variable is equal to the string ‚ÄúGreen Tea‚Äù.\nThe cout << \"You have ordered Green Tea\" << endl; line prints the string ‚ÄúYou have ordered Green Tea‚Äù followed by a newline character to the console.\nThe } line ends the if statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nIf-Else Statement\nIf-else statement is used to check if a condition is true or false. If the condition is true, then the code inside the if statement is executed. If the condition is false, then the code inside the else statement is executed.\nTask\nWrite a program that checks if a tea shop is open. If the current hour (input by the user) is between 8 AM and 6 PM, the shop is open; otherwise, it‚Äôs closed.\nSolution\nif-else.cpp#include <iostream>using namespace std;\nint main(){ int hour;\n cout << \"Enter the current hour (0-23): \"; cin >> hour;\n if(hour >= 8 && hour <= 18) {  cout << \"Tea shop is OPEN!\" << endl; } else {  cout << \"Tea shop is CLOSED!\" << endl; }\n return 0;}\nGoing through the code\n\nThe int hour; line declares a variable named hour of type int and does not assign a value to it.\nThe cout << \"Enter the current hour (0-23): \"; line prints the string ‚ÄúEnter the current hour (0-23): ‚Äù to the console.\nThe cin >> hour; line reads an integer from the console and assigns it to the hour variable.\nThe if(hour >= 8 && hour <= 18) { line starts an if statement that checks if the hour variable is greater than or equal to 8 and less than or equal to 18.\nThe cout << \"Tea shop is OPEN!\" << endl; line prints the string ‚ÄúTea shop is OPEN!‚Äù followed by a newline character to the console.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe cout << \"Tea shop is CLOSED!\" << endl; line prints the string ‚ÄúTea shop is CLOSED!‚Äù followed by a newline character to the console.\nThe } line ends the if statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0. It can return any value, but in this case, we are returning 0 as this is the exit code for a successful program execution.\n\nNested If-Else\nNested if-else consists of an if statement inside an else statement.\nChallenge\nA tea shop offers discounts based on the number of tea cups ordered. Write a program that checks the number of cups ordered and applies a discount:\n\nMore than 20 cups: 20% discount\nBetween 10 and 20 cups: 10% discount\nLess than 10 cups: No discount\n\nSolution\nnested-if-else.cpp#include <iostream>using namespace std;\nint main(){ int cups; double pricePerCup = 2.5, totalPrice, discount;\n cout << \"Enter the number of tea cups\" ; cin >> cups;\n totalPrice = pricePerCup * cups;\n if(cups > 20){  discount = 0.20; } else if (cups >= 10 && cups <= 20){  discount = 0.10; } else {  discount = 0; }\n totalPrice -= (totalPrice * discount);\n cout << \"Total price after discount is: \" << totalPrice << endl;\n return 0;}\nGoing through the code\n\nThe int teaBags; line declares a variable named teaBags of type int and does not assign a value to it.\nThe double pricePerBag, totalPrice, discount; line declares three variables named pricePerBag, totalPrice, and discount of type double and does not assign a value to them.\nThe cout << \"Enter the number of tea bags you have: \"; line prints the string ‚ÄúEnter the number of tea bags you have: ‚Äù to the console.\nThe cin >> teaBags; line reads an integer from the console and assigns it to the teaBags variable.\nThe if (teaBags > 20) { line starts an if statement that checks if the teaBags variable is greater than 20.\nThe discount = 0.20; line assigns the value 0.20 to the discount variable.\nThe } else if (teaBags >= 10 && teaBags <= 20) { line starts an else if block that is executed if the if statement is false.\nThe discount = 0.10; line assigns the value 0.10 to the discount variable.\nThe } else { line starts an else block that is executed if the if statement is false.\nThe discount = 0; line assigns the value 0 to the discount variable.\nThe } line ends the if statement.\nThe totalPrice = pricePerBag * teaBags; line calculates the total price by multiplying the teaBags and pricePerBag variables.\nThe totalPrice -= (totalPrice * discount); line calculates the discounted price by subtracting the totalPrice multiplied by discount from the totalPrice variable.\nThe cout << \"Total price after discount is: \" << totalPrice << endl; line prints the string ‚ÄúTotal price after discount is: ‚Äù followed by the value of the totalPrice variable to the console.\nreturn 0; line indicates that the program has finished executing and returns a value of 0.\n\nSwitch Case\nSwitch statement is used to check if a variable matches a specific value. If the variable matches the value, then the code inside the case statement is executed. If the variable does not match the value, then the code inside the default statement is executed.\nIt is useful when you have multiple options and want to execute different code based on the value of the variable.\nTask\nWrite a program that lets the user select a tea type from a menu. Use a switch statement to display the price based on the selected tea:\n\nGreen Tea: $2\nBlack Tea: $3\nOolong Tea: $4\n\nSolution\nswitch-case.cpp#include <iostream>using namespace std;\nint main(){ int choice; double price;\n cout << \"Select your tea\\n\"; cout << \"1. Green Tea\\n\"; cout << \"2. Lemon Tea\\n\"; cout << \"3. Oolong Tea\\n\"; cout << \"Enter your choice in number: \\n\";\n cin >> choice;\n switch(choice){  case 1:   price = 2.0;   cout << \"You selected Green Tea. Price: \"<< price << endl;   break;  case 2:   price = 3.0;   cout << \"You selected Lemon Tea. Price: \"<< price << endl;   break;  case 3:   price = 4.0;   cout << \"You selected Oolong Tea. Price: \"<< price << endl;   break;  default:   cout << \"Invalid choice\" << endl;   break; }\n return 0;}\nGoing through the code\n\nThe int choice; line declares a variable named choice of type int and does not assign a value to it.\nThe double price; line declares a variable named price of type double and does not assign a value to it.\nThe cout << \"Select your tea\\n\"; line prints the string ‚ÄúSelect your tea\\n‚Äù to the console.\nThe cout << \"1. Green Tea\\n\"; line prints the string ‚Äú1. Green Tea\\n‚Äù to the console.\nThe cout << \"2. Lemon Tea\\n\"; line prints the string ‚Äú2. Lemon Tea\\n‚Äù to the console.\nThe cout << \"3. Oolong Tea\\n\"; line prints the string ‚Äú3. Oolong Tea\\n‚Äù to the console.\nThe cout << \"Enter your choice in number: \\n\"; line prints the string ‚ÄúEnter your choice in number: \\n‚Äù to the console.\nThe cin >> choice; line reads an integer from the console and assigns it to the choice variable.\nThe switch(choice){ line starts a switch statement that checks the value of the choice variable.\nThe case 1: line starts a case block that is executed if the choice variable is equal to 1.\nThe price = 2.0; line assigns the value 2.0 to the price variable.\nThe cout << \"You selected Green Tea. Price: \"<< price << endl; line prints the string ‚ÄúYou selected Green Tea. Price: ‚Äù followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe case 2: line starts a case block that is executed if the choice variable is equal to 2.\nThe price = 3.0; line assigns the value 3.0 to the price variable.\nThe cout << \"You selected Lemon Tea. Price: \"<< price << endl; line prints the string ‚ÄúYou selected Lemon Tea. Price: ‚Äù followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe case 3: line starts a case block that is executed if the choice variable is equal to 3.\nThe price = 4.0; line assigns the value 4.0 to the price variable.\nThe cout << \"You selected Black Tea. Price: \"<< price << endl; line prints the string ‚ÄúYou selected Black Tea. Price: ‚Äù followed by the value of the price variable to the console.\nThe break; line ends the case block.\nThe default: line starts a default block that is executed if the choice variable is not equal to 1, 2, or 3.\nThe cout << \"Invalid choice\" << endl; line prints the string ‚ÄúInvalid choice‚Äù followed by a newline character to the console.\nThe break; line ends the default block.\nThe } line ends the switch statement.\nreturn 0; line indicates that the program has finished executing and returns a value of 0.\n\nSummary\nIn this chapter, we have learned about conditional statements and how to use them. We have also learned about loops and how to use them. We have also learned about switch statements and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousOperatorsNext Loops  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/loops/",
    "content": " Loops   In this chapter, we will learn about loops in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nWhile Loop\nWhile loop is used to execute a block of code as long as a condition is true. The loop will continue to execute as long as the condition is true. The loop will execute at least once, even if the condition is initially false.\nTask\nWrite a program that keeps track of tea orders. Each time a cup of tea is made, decrease the number of cups remaining. The loop should run until all cups are served.\nSolution\nwhile.cpp#include <iostream>#include <string>using namespace std;int main(){ int teaCups;\n cout << \"Enter the number of tea cups to server: \"; cin >> teaCups;\n //while loop while (teaCups > 0) {  teaCups--;  cout << \"Serving a cup of tea \\n\" << teaCups << \" remaining\" << endl; }\n cout << \"All tea cups are served. \" << endl;\n return 0;}\nGoing through the code:\nWe have already gone through the basic code already many times, in this chapter we will focus on the while loop.\n\n\nwhile loop is used to execute a block of code as long as a condition is true.\n\n\nThe condition is checked before each iteration of the loop.\n\n\nThe loop will continue to execute as long as the condition is true.\n\n\nThe loop will execute at least once, even if the condition is initially false.\n\n\nwhile (condition) {  // code to be executed}\nHere while checks if the teaCups is greater than 0, if it is true, it will execute the code inside the loop. If the teaCups is 0, the loop will not execute and the program will continue to the next line.\n\n\nDo-While Loop\nDo-while loop is used to execute a block of code as long as a condition is true. The loop will execute at least once, even if the condition is initially false.\nTask\nCreate a program that asks the user if they want more tea. Keep asking them until they type ‚Äúno‚Äù (case-insensitive), using a do-while loop.\nSolution\ndo-while.cpp#include <iostream>#include <string>using namespace std;\nint main(){ string response;\n do {  cout << \"Do you want more tea (yes/no): \";  getline(cin, response); } while (response != \"no\" || response != \"No\");}\nGoing through the code\nHere we have used the do-while loop. The loop will execute at least once, even if the condition is initially false.\ndo {  // code to be executed} while (condition);\nHere do prints the message and asks the user for input. Then it checks if the response is equal to ‚Äúno‚Äù or ‚ÄúNo‚Äù. If it is, it will execute the code inside the loop. If it is not, it will exit the loop and continue to the next line.\nFor Loop\nFor loop is used to execute a block of code for a specified number of times. The loop will execute the code inside the loop for the specified number of times.\nTask\nWrite a program that prints the brewing instructions for making 5 cups of tea. The brewing process should be printed once for each cup using a for loop.\nSolution\nfor.cpp#include <iostream>#include <string>using namespace std;\nint main(){ int teaCups = 5; int i = 100;\n for( int i = 1 ; i <= teaCups ; i++){   cout << \"Brewing cup \" << i << \" of tea...\" << endl; } cout << i; cout << \"Outside of loop\"; return 0;}\nGoing through the code:\nHere we are using the for loop. The loop will execute the code inside the loop for the specified number of times.\nfor (initialization; condition; increment/decrement) {  // code to be executed}\nFor loop has three parts:\n\nInitialization: This is where you initialize the loop variable.\nCondition: This is where you check if the loop should continue or not.\nIncrement/Decrement: This is where you update the loop variable.\n\nIn our case, we are initializing the loop variable with i = 1 and checking if the loop should continue with i <= teaCups. If the condition is true, the code inside the loop will be executed. If the condition is false, the loop will exit and the program will continue to the next line.\nBreak Keyword\nBreak keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\nTask\nWrite a program that keeps serving tea until the user says they‚Äôve had enough (input ‚Äòstop‚Äô). Use a break statement to exit the loop when the user types ‚Äòstop‚Äô.\nSolution\nbreak.cpp#include <iostream>#include <string>using namespace std;\nint main(){ string response;\n while(true){  cout << \"Do you want more tea (type 'stop' to exit)?: \";  getline(cin, response);\n  if(response == \"stop\"){   //exit the loop   break;  }\n  cout << \"Here is your another cup of tea. \\n\"; }\n cout << \"No more tea will be served to you\"; return 0;}\nGoing through the code:\nIn this case, we are using the break keyword to exit the loop when the user types ‚Äòstop‚Äô. The break keyword is used to exit the loop immediately, without executing the remaining code inside the loop.\nContinue Keyword\nContinue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\nTask\nWrite a program that skips brewing green tea if the user dislikes it. Use a continue statement to skip over green tea but brew other types of tea in a list.\nSolution\n#include <iostream>#include <string>using namespace std;\nint main(){ string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};\n for(int i = 0 ; i < 5 ; i++){  if(teaTypes[i] == \"Green Tea\"){   cout << \"Skipping the \" << teaTypes[i] << endl;   continue;  }\n  cout << \"Brewing \" << teaTypes[i] << \"...\" << endl; }\n return 0;}\nGoing through the code:\nIn this code solution, we are introducing 2 new concepts:\nstring teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"}; This line declares an array of strings with 5 elements.\nArray is a collection of elements of the same type. In this case, we are declaring an array of strings. In memory, the array is stored as a contiguous block of memory.\nAlso we are using the continue keyword to skip over the green tea. The continue keyword is used to skip the remaining code inside the loop and move to the next iteration of the loop.\nNested Loops\nNested loops are loops inside of loops. The inner loop is executed for each iteration of the outer loop.\nTask\nWrite a program that brews multiple cups of different types of tea. For each type of tea, brew 3 cups using a nested loop.\nSolution\nnested-loops.cpp#include <iostream>#include <string>using namespace std;\nint main(){ string teaTypes[5] = {\"Oolong tea\", \"Orange Tea\", \"Green Tea\", \"Black Tea\", \"Lemon Tea\"};\n for(int i = 0 ; i < 5 ; i++){  cout << \"Brewing \" << teaTypes[i] << \"...\" << endl;\n  for (int j = 1 ; j <= 3 ; j++){   cout << \"Brewing \" << j << \" cup of \" << teaTypes[i] << endl;  } }\n return 0;}\nGoing through the code:\nIn this code solution, we have already gone through the concept of Array. Further, we are using nested loops to brew multiple cups of different types of tea. The outer loop is used to iterate over the array of strings, and the inner loop is used to iterate over the number of cups to be brewed.\nFor every iteration of the outer loop, the inner loop will execute 3 times. The inner loop will print the number of cups being brewed and the type of tea being brewed.\nSummary\nIn this chapter, we have learned about loops in C++. We have also learned about the different types of loops and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousControl FlowNext Functions  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-c/functions/",
    "content": " Functions   In this chapter, we will learn about functions in C++. Our learning will be based on the task based approach. Each task will help you to understand the requirements and then you will be able to implement the code.\nFunctions in C++\nA function is a block of code designed to perform a specific task.\nFunctions in C++ follow this basic syntax:\nreturnType functionName(parameters) { // function body}\n\nReturn Type: Specifies the data type of the value returned by the function. Use void if no value is returned.\nFunction Name: Describes what the function does.\nParameters: Input values for the function (optional).\n\nFor example,\n#include <iostream>using namespace std;\n// Function to check tea temperatureint checkTeaTemperature(int temperature) { return temperature;}\nint main() { int temp = checkTeaTemperature(85); // Function call cout << \"The tea temperature is \" << temp << \"¬∞C\" << endl; return 0;}\nDeclaring a Function\nFunction declaration tells the compiler about the function‚Äôs name, return type, and parameters. It‚Äôs also called a function prototype.\nThe function body is defined elsewhere.\nFor example,\n#include <iostream>using namespace std;\n// Declaring the function (prototype)void serveChai(int cups);\nint main() { serveChai(3); // Function call return 0;}\n// Function definition is done latervoid serveChai(int cups) { cout << \"Serving \" << cups << \" cups of chai!\" << endl;}\nDefining a Function\nA function definition includes the full function with the body. You must define the function after declaring it if it‚Äôs not inline.\nFor example,\n#include <iostream>using namespace std;\n// Function definition with bodyvoid makeChai() { cout << \"Boiling water, adding tea leaves, and serving chai!\" << endl;}\nint main() { makeChai(); // Calling the function return 0;}\nCalling a Function\nTo execute a function, you call it by its name followed by parentheses. If the function takes arguments, pass them inside the parentheses.\nFor example:\n#include <iostream>using namespace std;\n// Function to brew teavoid brewChai() { cout << \"Chai is being brewed!\" << endl;}\nint main() { brewChai(); // Function call return 0;}\nFunction Parameters\n\nFormal parameters: Defined in the function signature.\nActual parameters: Values passed during the function call.\nDefault parameters: Parameters with default values if none are passed.\n\nFor example,\n#include <iostream>using namespace std;\n// Function with default parametervoid serveChai(string teaType = \"Masala Chai\") { cout << \"Serving \" << teaType << endl;}\nint main() { serveChai();        // Uses default parameter serveChai(\"Green Chai\");  // Uses actual parameter return 0;}\nPass by Value\nPass by value means the function receives a copy of the argument. Changes made inside the function do not affect the original variable.\nFor example,\npass-by-value.cpp#include <iostream>using namespace std;\nvoid pourChai(int cups) { cups = cups + 1; // Modifies local copy cout << \"Poured \" << cups << \" cups of chai!\" << endl;}\nint main() { int chaiCups = 2; pourChai(chaiCups); // Passing by value cout << \"Total chai cups outside function: \" << chaiCups << endl; return 0;}\nPass by Reference\nPass by reference passes the actual variable, so changes in the function affect the original variable.\nFor example,\npass-by-reference.cpp#include <iostream>using namespace std;\nvoid refillChai(int &cups) { // Pass by reference cups += 2; cout << \"Refilled to \" << cups << \" cups of chai!\" << endl;}\nint main() { int chaiCups = 3; refillChai(chaiCups); // Passing by reference cout << \"Total chai cups now: \" << chaiCups << endl; return 0;}\nScope of Variable\n\nVariables declared inside a function have local scope (accessible only within the function).\nVariables declared outside all functions have global scope (accessible from any function).\n\nFor example,\nscope-of-variable.cpp#include <iostream>using namespace std;\nint globalChaiStock = 100; // Global variable\nvoid serveChai() { int localCups = 5; // Local variable cout << \"Serving \" << localCups << \" cups from \" << globalChaiStock << \" total stock.\" << endl;}\nint main() { serveChai(); cout << \"Global chai stock after serving: \" << globalChaiStock << endl; return 0;}\nFunction Overloading\nFunction overloading allows multiple functions with the same name but different parameter types or numbers.\nFor example,\nfunction-overloading.cpp#include <iostream>using namespace std;\n// Function overloadingvoid brewChai(int cups) { cout << \"Brewing \" << cups << \" cups of chai.\" << endl;}\nvoid brewChai(string teaType) { cout << \"Brewing \" << teaType << \".\" << endl;}\nint main() { brewChai(3);       // Calls int version brewChai(\"Masala Chai\"); // Calls string version return 0;}\nLambda Functions\n\nA lambda function is an anonymous function that can be defined inline using the [] syntax.\nThey‚Äôre useful for short, simple functions.\n\nFor example,\n#include <iostream>using namespace std;\nint main() { // Lambda function to prepare chai auto prepareChai = [](int cups) {  cout << \"Preparing \" << cups << \" cups of chai.\" << endl; };\n prepareChai(2); // Calling lambda function return 0;}\nSummary\n\nFunction Declaration & Definition: Tell the compiler about a function and define what it does.\nCalling Functions: Execute the function by passing arguments if required.\nPass by Value/Reference: Controls whether changes affect the original value or a copy.\nFunction Overloading: Allows multiple functions with the same name but different parameter lists.\nLambda Functions: Short, inline functions used for simple tasks.\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousLoopsNext Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúChai aur Django‚Äù series on the Chai aur Code YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n Play  \nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousFunctionsNext Django Intro  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/getting-started/",
    "content": " Getting Started   Django is popular framework amongst python developers and used by many large companies, including Google, Facebook, and Instagram.\nIn this guide, we will learn how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We will also learn how to run the server and view the output.\nWhat is Django?\nDjango is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. It takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel.\nDjango is a full-featured web framework that follows the Model-View-Controller (MVC) architectural pattern. It provides a set of tools and libraries for building web applications, including an ORM, a templating engine, and a built-in admin interface.\nEnvironment Setup\nTo get started with Django, you‚Äôll need to install it on your computer. You can do this by running the following command in your terminal, after setting up a virtual environment:\n    MacOS   Windows   Linux   Terminal windowpython3 -m venv .venv\n# to activate the virtual environmentsource .venv/bin/activate Terminal windowpython -m venv .venv\n# to activate the virtual environment.venv\\Scripts\\activate Terminal windowpython3 -m venv .venv\n# to activate the virtual environmentsource .venv/bin/activate   \nThis is regular way but these days I am using uv to manage virtual environment and other tools. It‚Äôs ridiculously easy and fast and cross-platform.\n    MacOS   Windows   Linux   Terminal windowbrew install uv\n# to create a virtual environmentuv venv\n# to activate the virtual environmentsource .venv/bin/activate Terminal windowpowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n# to create a virtual environmentuv venv\n# to activate the virtual environment.venv\\Scripts\\activate Terminal windowpip install uv\n# to create a virtual environmentuv venv\n# to activate the virtual environmentsource .venv/bin/activate  \nNow for all installations, you can use uv pip install command. For example, to install Django, run the following command:\nTerminal windowuv pip install django\nuv pip install -r requirements.txt\n\nDjango Project\nA Django project is a collection of settings and configurations that define the structure and behavior of a web application. It includes the code for the application, as well as the templates, static files, and other resources that make up the application.\nTo create a new Django project, you can use the following command:\nTerminal windowdjango-admin startproject chai-aur-django\ncd chai-aur-django\nThis will create a new directory called chai-aur-django with the basic structure of a Django project.\nStart a Django Server\nTo start the Django server, you can use the following command:\nTerminal windowpython manage.py runserver\nThis will start the server and make it accessible at localhost:8000.\nIgnore the unapplied migrations warning. This is a common issue when starting a new Django project. We will address this in a later section.\nCreating our first views\nCreate a new file called views.py in the chai-aur-django directory. In this file, we will define a few views that are simple functions that return a response. We want to have home page, about page, and contact page. Each of these pages will return html content.\nviews.pyfrom django.http import HttpResponse\ndef home(request): return HttpResponse(\"<h1>Welcome to Chai's Django Project: Home page</h1>\")\ndef about(request): return HttpResponse(\"<h1>Welcome to Chai's Django Project: About page</h1>\")\ndef contact(request): return HttpResponse(\"<h1>Welcome to Chai's Django Project: Contact page</h1>\")\nNow, let‚Äôs create a new file called urls.py in the chai-aur-django directory. In this file, we will define the URL patterns for our application. If the file is already there, you can just add the following code to the end of the file:\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [ path('', views.home, name='home'), path('about/', views.about, name='about'), path('contact/', views.contact, name='contact'),]\nNow, let‚Äôs run the server again and visit the following URLs:\n\nlocalhost:8000\nlocalhost:8000/about\nlocalhost:8000/contact\n\nYou should see the following output:\nWelcome to Chai's Django Project: Home pageWelcome to Chai's Django Project: About pageWelcome to Chai's Django Project: Contact page\n\nAdding Templates\nIn Django, templates are used to generate HTML pages. They are used to display data and perform logic in a web application. To create a template, you can create a new file called templates/index.html in the chai-aur-django directory. Make sure that template folder is at same level as manage.py file. In this file, you can write HTML code that will be used to generate the HTML page.\ntemplates/index.html<!DOCTYPE html><html> <head>  <title>Welcome to Chai's Django Project</title> </head> <body>  <h1>Welcome to Chai's Django Project</h1> </body></html>\nNow, let‚Äôs run the server again and visit the http://localhost:8000/ URL. You should see the following output:\nWelcome to Chai's Django Project\n\nAdding CSS and JavaScript\nTo add CSS and JavaScript to your Django project, you can create a new file called static/css/style.css in the chai-aur-django directory. In this file, you can write CSS code that will be used to style the HTML page. You can also create a new file called static/js/script.js in the chai-aur-django directory. In this file, you can write JavaScript code that will be used to add interactivity to the HTML page.\nstatic/css/style.cssbody { background-color: #161616; font-family: Arial, sans-serif; color: #fff;}\nstatic/js/script.jsconsole.log(\"Hello, world!\");\nTo add this css file go to settings.py and add the following line:\nsettings.pyimport os'DIRS': ['templates'], # inside template section\nSTATIC_URL = '/static/' # below this add the following lineSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nIn the index.html file, add the following line at the top of the file:\n{% load static %}\n<link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\nNow, let‚Äôs change the home view to use the new template:\nfrom django.shortcuts import render\ndef home(request): return render(request, 'index.html')\nNow, let‚Äôs run the server again and visit the localhost:8000 URL. You should see the following output:\nWelcome to Chai's Django Project\n\nSummary\nIn this tutorial, we have learned how to create a Django project, create a view, create a template, and add CSS and JavaScript to our project. We have also learned how to run the server and view the output. This is the end of the first part of the tutorial. We will surely have more fun in the next part. Keep enjoying Chai aur Django!\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext Jinja Templates App  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/jinja-templates/",
    "content": " Jinja Templates App in Django   Jinja2 is a template engine for Python. It is used in Django to render templates. It is a very powerful template engine that can be used to render HTML, XML, and other formats. It is also used to render templates for the Django admin interface.\nInstallation\nIf you are in Django, you don‚Äôt need to install Jinja2 separately. It is already installed with Django. Django also comes with a built-in template configurations that allows you to use Jinja2 templates.\nJinja2 templates are written in a simple text format called HTML. The syntax is very similar to HTML, but with some additional features. You need to inject variables into the template using the {{ variable }} syntax. For example, if you want to display a name, you can use the following code:\nHello {{ name }}!\nThis will display the name of the person who is currently logged in, if there is one.\nCommon Template Tags\nFollowing are some of the common template tags that you can use in Jinja2 templates:\n % if %\nThe {% if %} tag is used to conditionally display content in a template. It takes a boolean expression as an argument, and if the expression evaluates to True, the content inside the tag will be displayed. If the expression evaluates to False, the content will be skipped.\nFor example, the following code will display a greeting message only if the name variable is not empty:\n{% if name %} Hello, {{ name }}!{% endif %}\n{% for %}\nThe {% for %} tag is used to iterate over a sequence of items. It takes a variable name and a sequence as arguments, and displays the content inside the tag for each item in the sequence.\nFor example, the following code will display a list of names:\n{% for name in names %} {{ name }} is a name.{% endfor %}\n{% block %}\nThe {% block %} tag is used to define a block of content that can be overridden in child templates. It takes a name as an argument, and defines a block with that name that can be overridden in child templates.\nFor example, the following code defines a base template that includes a header and a footer:\n<!DOCTYPE html><html> <head>  <title>{% block title %}My Website{% endblock %}</title> </head> <body>  {% block content %}   <h1>Welcome to my website!</h1>  {% endblock %}  <footer>   {% block footer %}    <p>Copyright ¬© 2021</p>   {% endblock %}  </footer> </body></html>\nAnd the following code defines a child template that overrides the content block:\n{% extends \"base.html\" %}\n{% block title %}My Website{% endblock %}\n{% block content %} <h1>Welcome to my website!</h1> <p>This is a child template.</p>{% endblock %}\nIn this example, the content block in the child template overrides the content block in the base template, and the title block is not overridden.\n{% include %}\nThe {% include %} tag is used to include the contents of another template file. It takes a template name as an argument, and includes the contents of the template file in the current template.\nFor example, the following code includes the contents of a template file called header.html:\n{% include \"header.html\" %}\nThis will include the contents of the header.html template file in the current template.\n{% extends %}\nThe {% extends %} tag is used to extend a base template. It takes a template name as an argument, and extends the base template with the contents of the template file.\nFor example, the following code extends the base.html template with the contents of a template file called child.html:\n{% extends \"base.html\" %}\n{% block content %} <h1>Welcome to my website!</h1> <p>This is a child template.</p>{% endblock %}\nIn this example, the content block in the child template overrides the content block in the base template, and the title block is not overridden.\n{% load %}\nThe {% load %} tag is used to load a template tag library. It takes a library name as an argument, and loads the template tag library with that name.\nFor example, the following code loads the static template tag library:\n{% load static %}\nThis will load the static template tag library, which provides a set of template tags for working with static files.\n{% static %}\nThe {% static %} tag is used to include a static file in a template. It takes a file path as an argument, and includes the contents of the file in the current template.\nFor example, the following code includes the contents of a CSS file called style.css:\n<link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\nThis will include the contents of the style.css file in the current template.\n{% url %}\nThe {% url %} tag is used to generate a URL for a view. It takes a view name and a set of arguments as arguments, and generates a URL for the view with those arguments.\nFor example, the following code generates a URL for the index view with the name argument set to 'John':\n<a href=\"{% url 'index' name='John' %}\">Go to the home page</a>\nThis will generate a link to the home page with the name argument set to 'John'.\nApps in Django\nThe most common way to organize your Django project is to use apps. An app is a self-contained module that contains models, views, templates, and other components of your project. Apps allow you to organize your code into logical units and make it easier to manage and maintain your project.\nYou can create it manually or use the startapp command to create a new app for you. To create an app, navigate to the directory where you want to create the app and run the following command:\nTerminal windowpython manage.py startapp chai\nThis will create a new directory called chai with the necessary files and directories for an app.\nTo add an app to your project, you need to add it to the INSTALLED_APPS setting in your project‚Äôs settings.py file. You can do this by adding the app‚Äôs name to the list of installed apps:\nINSTALLED_APPS = [  'django.contrib.admin',  'django.contrib.auth',  'django.contrib.contenttypes',  'django.contrib.sessions',  'django.contrib.messages',  'django.contrib.staticfiles',  'chai',]\nThis will add the chai app to your project‚Äôs installed apps.\nTemplates in Apps and layout extension\nIn Django, templates are organized into apps. Each app can have its own templates directory, which contains the templates for that app. Create a new directory called templates in your app‚Äôs directory. Inside the chai directory, create a templates directory and add a all_chai.html file to it.\nAdd your basic html code to the all_chai.html file.\nTo serve this file, we need a view and a url. Create a new file called views.py in your app‚Äôs directory. Add the following code to the file:\nviews.pyfrom django.shortcuts import render\ndef all_chai(request):  return render(request, 'all_chai.html')\nThis view will render the all_chai.html template when it is called.\nCreate a new file called urls.py in your app‚Äôs directory. Add the following code to the file:\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [  path('', views.all_chai, name='all_chai'),]\nThis urlpattern will map the root URL of the app to the all_chai view.\nNow, we need to make aware of this new urlpattern in our project‚Äôs urls.py file. Add the following code to the project‚Äôs urls.py file:\nurls.pyfrom django.contrib import adminfrom django.urls import path, include\nurlpatterns = [  path('admin/', admin.site.urls),  path('chai/', include('chai.urls')),]\nThis will include the chai.urls file in the project‚Äôs urlpatterns.\nNow, we can access the all_chai view by going to http://localhost:8000/chai/.\nCommon Layout for all pages\nIn Django, you can create a common layout for all pages in your project by using the base.html template. Create a new file called base.html in your project‚Äôs templates directory. Add the following code to the file:\nbase.html{% load static %}\n<!DOCTYPE html><html lang=\"en\"><head> <meta charset=\"UTF-8\"> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n <title>  {% block title %}   Chai aur Django  {% endblock title %} </title></head><body> <nav>I will add it later</nav> {% block content %} {% endblock %}</body></html>\nNow, this layout can be used for all pages in your project. To use it, you need to include it in your templates. For example, if you want to use the layout for the all_chai view, you can add the following code to the all_chai.html file:\nall_chai.html{% extends \"base.html\" %}\n{% block title %} All Chai{% endblock %}\n{% block content %} <h1>All Chai</h1> <p>This is the all chai page.</p>{% endblock %}\nThis will use the base.html layout and override the title and content blocks with the appropriate values for the all_chai view.\nSummary\nIn this part, we learned about Jinja2 templates and how to use them in Django. We also learned about apps in Django and how to create a common layout for all pages in your project. By using Jinja2 templates and apps, you can create dynamic and reusable templates in Django that make your web development process more efficient and enjoyable.\nFollow chai aur Django to learn more about Django and its features on youtube.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousDjango IntroNext Tailwind Integration  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/tailwind/",
    "content": " Tailwind with Django   Tailwind CSS is a CSS framework that allows you to build custom styles for your web pages. It provides a set of pre-built classes that you can use to style your HTML elements.\nBefore we run the next command we need pip to be installed in your system. So far, we have been using uv to install packages, which is new and not yet supported by many packages.\nTerminal windowpython -m ensurepip --upgrade\n# alternativelypython -m pip install --upgrade pip\nTo install Tailwind CSS in your Django project, you can use the following steps:\nTerminal windowpip install django-tailwindpip install 'django-tailwind[reload]'\nThis will install the django-tailwind package and the django-tailwind[reload] package, which includes the tailwind-django command-line tool.\nOnce you have installed Tailwind CSS, you can use the tailwind-django command to generate the necessary files for your project. This command will create a tailwind.config.js file in your project directory, as well as a static/css/tailwind.css file that contains the compiled Tailwind CSS.\nNow, add tailwind to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [ # ... 'tailwind', # ...]\nNext, run the tailwind-django command to generate the necessary files for your project:\nTerminal windowpython manage.py tailwind init\nAdd the newly create theme to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [ # ... 'theme', # ...]TAILWIND_APP_NAME = 'theme' # This is the name of the app that will be used to generate the tailwind filesINTERNAL_IPS = ['127.0.0.1']\nNow run the following command to generate the necessary files for your project:\nTerminal windowpython manage.py tailwind install\nYou can now use the Tailwind CSS classes in your Django templates. All though, tailwind provides you a base template that you can use to start your project but you can now use tailwind in any base template you want.\n{% load static tailwind_tags %}...<head> ... {% tailwind_css %} ...</head>\n\n‚òïÔ∏è I was not able to get tailwind intellisense to work in my IDE, so I had to create a tailwind.config.js file manually. This file is totally empty but works\n\nFinally, suggestions are there but you are not getting the desired result. That‚Äôs because this app needs nodejs to be installed in your system. And you need to provide the path to the nodejs executable in your settings.py file:\nYou can use command which node to find the path to the nodejs executable.\n    MacOS   Windows   NPM_BIN_PATH='/user/local/bin/npm' NPM_BIN_PATH = r\"C:\\Program Files\\nodejs\\npm.cmd\"  \nNow everything is ready and we need 2 terminals to run the app.\nFirst terminal:\nTerminal windowpython manage.py runserver\nSecond terminal:\nTerminal windowpython manage.py tailwind start\n\nfor production change this command to python manage.py tailwind build\n\nHot Reloading\nSince we have already installed the django-tailwind[reload] package, we can use the tailwind-django command to enable hot reloading in our project.\nAdd it to your INSTALLED_APPS in your settings.py file:\nsettings.pyINSTALLED_APPS = [ # ... 'django_browser_reload', #...]\nAdd following code to your settings.py file:\nsettings.pyMIDDLEWARE = [ # ... \"django_browser_reload.middleware.BrowserReloadMiddleware\", # ...]\nAdd following code to your urls.py file:\nurls.pyfrom django.urls import include, path\nurlpatterns = [ ..., path(\"__reload__/\", include(\"django_browser_reload.urls\")),]\nEnable the admin panel in Django\nNow that we have Tailwind CSS installed and configured, we can enable the admin panel in our Django project. All settings and urls for the admin panel are already provided in django.\nFirst run the migrate command to create the necessary tables for the admin panel:\nTerminal windowpython manage.py migrate\nNext is to create the admin user:\nTerminal windowpython manage.py createsuperuser\nAdd your username, email (this can be empty), and password to the createsuperuser command.\nNow you can acces the admin panel by going to localhost:8000/admin in your browser. Enter your username and password to log in.\nTake a tour of the admin panel and in case you are wondering, yes, we can change the look and feel of the admin panel using so many plugins and themes that are available in the market but that is out of the scope of this tutorial.\nConclusion\nIn this tutorial, we have learned how to install and configure Tailwind CSS in a Django project. We have also learned how to use the admin panel in Django and how to enable hot reloading in our project. With these skills, you can now start building your own Django projects with Tailwind CSS and other plugins and themes that you need.\nNow, go and subscribe to Chai aur Code to get notified about new tutorials and updates on my channel.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousJinja Templates AppNext Models  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/models/",
    "content": " Django Models   Django models are the heart of the Django framework. They are used to define the structure of the database and the relationships between different models. In this section, we will explore the basics of Django models and how to create them.\nDefining a Model\nSo far, we have created a same chai app and it‚Äôs time to add some data to it. To do this, we need to define a model. A model is a Python class that represents a table in the database. It contains fields that define the structure of the table and methods that define the behavior of the table.\nTo define a model, we need to use the models.py file in our Django project. Add the following code to the models.py file:\nmodels.pyfrom django.db import modelsfrom django.utils import timezone\n# Create your models here.class ChaiVariety(models.Model): CHAI_TYPE_CHOICES = [  ('ML', 'MASALA'),  ('GR', 'GINGER'),  ('KL', 'KIWI'),  ('PL', 'PLAIN'),  ('EL', 'ELAICHI'), ]\n name = models.CharField(max_length=100) image = models.ImageField(upload_to='chais/') date_added = models.DateTimeField(default=timezone.now) type = models.CharField(max_length=2, choices=CHAI_TYPE_CHOICES, default='ML')\n def __str__(self):  return self.name\nIn this code, we have defined a ChaiVariety model with the following fields:\n\nname: A CharField that stores the name of the chai variety.\nimage: An ImageField that stores the image of the chai variety.\ndate_added: A DateTimeField that stores the date and time when the chai variety was added.\ntype: A CharField that stores the type of the chai variety (e.g., ‚ÄòML‚Äô, ‚ÄòGR‚Äô, ‚ÄòKL‚Äô, ‚ÄòPL‚Äô, ‚ÄòEL‚Äô).\ndescription: A TextField that stores the description of the chai variety.\n\nThe __str__ method is used to return a string representation of the object. In this case, it returns the name of the chai variety.\nSince we are using image field, we need to install Pillow library to use it.\nTerminal windowpython -m pip install Pillow\nThen we need add some settings to our settings.py file to use the image field.\nsettings.pyMEDIA_URL = '/media/'MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nNow, let‚Äôs configure our projects urls.py file to reflect media files.\nurls.pyfrom django.conf import settingsfrom django.conf.urls.static import static\nurlpatterns = [  path('admin/', admin.site.urls),  #...  #...] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\nAdding Data to DB\nNow that we have defined our model, we can add some data to the database. Lets migrate the database and add some data to the ChaiVariety model.\nTerminal windowpython manage.py makemigrations chaipython manage.py migrate\nNow, let‚Äôs add some data to the database. You can go to admin.py file and add the following code to the ChaiVariety model.\nadmin.pyfrom django.contrib import adminfrom .models import ChaiVariety\nadmin.site.register(ChaiVariety)\nNow, go to the admin page and you should see the ChaiVariety model listed. Add some data to the model and save it.\nCreate a View\nNow that we have added some data to the database, we can create a view to display the data. Go to the views.py file and add the following code.\ndef all_chai(request): chais = ChaiVariety.objects.all() return render(request, 'chai/all_chai.html', {'chais': chais})\nGet Data in Template\nIn the all_chai.html template, we can use the chais variable to display the data. Add the following code to the all_chai.html template.\n{% for chai in chais %} <div class=\"chai-item\">  <img src=\"{{ chai.image.url }}\" alt=\"{{ chai.name }}\">  <h3>{{ chai.name }}</h3>  <p>{{ chai.description }}</p> </div>{% endfor %}\nAdd Description\nWe can add a description to the ChaiVariety model by adding a description field to the model. Add the following code to the models.py file.\nmodels.pyclass ChaiVariety(models.Model): CHAI_TYPE_CHOICES = [  ('ML', 'MASALA'),  ('GR', 'GINGER'),  ('KL', 'KIWI'),  ('PL', 'PLAIN'),  ('EL', 'ELAICHI'), ]\n name = models.CharField(max_length=100) image = models.ImageField(upload_to='chais/') date_added = models.DateTimeField(default=timezone.now) type = models.CharField(max_length=2, choices=CHAI_TYPE_CHOICES, default='ML') description = models.TextField(default='')\n def __str__(self):  return self.name\nAdd a Details View\nNow that we have added a description to the ChaiVariety model, we can create a view to display the details of a specific chai variety. Go to the views.py file and add the following code.\nviews.pyfrom django.shortcuts import render, get_object_or_404\ndef chai_detail(request, chai_id): chai = get_object_or_404(ChaiVariety, pk=chai_id) return render(request, 'chai/chai_detail.html', {'chai': chai})\nIn the all_chai.html template, we can use the url to display the details of a specific chai variety.\nall_chai.html{% for chai in chais %} <div class=\"chai-item\">  <img src=\"{{ chai.image.url }}\" alt=\"{{ chai.name }}\">  <h3>{{ chai.name }}</h3>  <p>{{ chai.description }}</p>  <a href=\"{% url 'chai_detail' chai.id %}\">Details</a> </div>\n{% endfor %}\nConfigure urls.py\nNow that we have created a view to display the details of a specific chai variety, we need to configure the urls.py file to reflect this. Go to the urls.py file and add the following code.\nurls.pyfrom django.urls import pathfrom . import views\nurlpatterns = [ path('', views.all_chai, name='all_chai'), path('<int:chai_id>/', views.chai_detail, name='chai_detail'),]\nCreate chai_detail.html Template\nNow that we have created a view to display the details of a specific chai variety, we need to create a template to display the details. Go to the chai folder and create a new file called chai_detail.html. Add the following code to the chai_detail.html template.\nchai_detail.html<h1>{{ chai.name }}</h1><p>{{ chai.description }}</p><img src=\"{{ chai.image.url }}\" alt=\"{{ chai.name }}\">\nSummary\nIn this section, we have learned how to create a model, add data to the database, create a view to display the data, and create a view to display the details of a specific chai variety. We have also learned how to configure the urls.py file to reflect the views and how to create a template to display the details.\nWith these concepts, we can create a complete web application that allows users to add and view chai varieties.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousTailwind IntegrationNext Relationships & Forms  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-django/relationships-and-forms/",
    "content": " Relationships and Forms in Django   Django has a number of built-in relationships that you can use to connect your models to each other. These relationships are used to create a more complex and powerful database.\nThe most common relationships are:\n\nOne-to-many\nMany-to-many\nOne-to-one\n\nOne-to-many\nOne-to-many relationships are used when you have a model that has a foreign key to another model. In a One-to-Many relationship, each instance of the parent model can be associated with multiple instances of the child model. For example, a Chai variety can have multiple reviews.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass ChaiReview(models.Model): chai = models.ForeignKey(ChaiVariety, on_delete=models.CASCADE, related_name='reviews') user = models.ForeignKey(User, on_delete=models.CASCADE) rating = models.IntegerField() comment = models.TextField() date_added = models.DateTimeField(default=timezone.now)\n def __str__(self):  return f'{self.user.username} review for {self.chai.name}'\nThis code creates a new model called ChaiReview that has a foreign key to the ChaiVariety model. The user field is a foreign key to the User model, and the rating and comment fields are integers and text fields respectively.\nMany-to-many\nMany-to-many relationships are used when you have a model that has a many-to-many relationship with another model. In a Many-to-Many relationship, each instance of one model can be associated with multiple instances of another model, and vice versa. For example, a Chai variety can be featured in multiple stores, and each store can feature multiple chai varieties.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass Store(models.Model): name = models.CharField(max_length=100) location = models.CharField(max_length=100) chai_varieties = models.ManyToManyField(ChaiVariety, related_name='stores')\n def __str__(self):  return self.name\nOne-to-one\nOne-to-one relationships are used when you have a model that has a one-to-one relationship with another model. In a One-to-One relationship, each instance of one model is associated with one and only one instance of another model. For example, each Chai variety can have a unique certificate.\nIn the existing chai app, open models.py and add the following code:\nmodels.pyclass ChaiCertificate(models.Model): chai = models.OneToOneField(ChaiVariety, on_delete=models.CASCADE, related_name='certificate') certificate_number = models.CharField(max_length=100) issued_date = models.DateTimeField(default=timezone.now) valid_until = models.DateTimeField()\n def __str__(self):  return f'Certificate for {self.chai.name}'\nUpdate the admin\nIn the existing chai app, open admin.py and add the following code:\nadmin.pyfrom django.contrib import adminfrom .models import ChaiVariety, ChaiReview, Store, ChaiCertificate\nclass ChaiReviewInline(admin.TabularInline): model = ChaiReview extra = 1\nclass ChaiVarietyAdmin(admin.ModelAdmin): list_display = ('name', 'type', 'date_added') inlines = [ChaiReviewInline]\nclass StoreAdmin(admin.ModelAdmin): list_display = ('name', 'location') filter_horizontal = ('chai_varieties',)\nclass ChaiCertificateAdmin(admin.ModelAdmin): list_display = ('chai', 'certificate_number', 'issued_date', 'valid_until')\nadmin.site.register(ChaiVariety, ChaiVarietyAdmin)admin.site.register(Store, StoreAdmin)admin.site.register(ChaiCertificate, ChaiCertificateAdmin)\nAdding a form on frontend\nIn the existing chai app, create a new file called forms.py in the chai app directory. In this file, add the following code:\nforms.pyfrom django import formsfrom .models import ChaiVariety\nclass ChaiVarietyForm(forms.Form): chai_variety = forms.ModelChoiceField(queryset=ChaiVariety.objects.all(), label=\"Select Chai Variety\")\nHandle the view for the form\nIn the existing chai app, open views.py and add the following code:\nviews.pyfrom .models import ChaiVariety, Storefrom .forms import ChaiVarietyForm\ndef chai_store_view(request): stores = None if request.method == 'POST':  form = ChaiVarietyForm(request.POST)  if form.is_valid():   chai_variety = form.cleaned_data['chai_variety']   stores = Store.objects.filter(chai_varieties=chai_variety) else:  form = ChaiVarietyForm()\n return render(request, 'chai/chai_stores.html', {'form': form, 'stores': stores})\nAdd the template\nIn the existing chai app, create a new file called chai_stores.html in the chai app directory. In this file, add the following code:\nchai_stores.html{% extends 'layout.html' %}\n{% block content %} <h1>Chai Stores</h1> <form method=\"post\">  {% csrf_token %}   {{ form.as_p }}  <button type=\"submit\">Search Stores</button> </form> {% if stores %}  <h2>Stores with selected Chai Variety</h2>  <ul>   {% for store in stores %}   <li>{{ store.name }} - {{ store.location }}</li>   {% endfor %}  </ul> {% endif %}{% endblock %}\nUpdate the urls\nIn the urls.py file, add the following code to the urlpatterns list:\nurls.pypath('chai_stores/', views.chai_store_view, name='chai_stores'),\nRun the server\nIn the terminal, navigate to the chai directory and run the following command:\nTerminal windowpython manage.py runserver\nThat‚Äôs it! You have successfully created a form that allows users to search for stores that have a specific chai variety. You can now add more functionality to the form and the view to make it more useful.\nSummary\nIn this section, you learned how to create a form that allows users to search for stores that have a specific chai variety. We have also discussed about the different types of relationships in Django and how to use them in your models and views.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousModelsNext Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúMaster SQL for Web Development‚Äù section in the Complete Web Dev Course on Udemy course. For the best learning experience, we recommend following these docs alongside our video lectures.\n\nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025  PreviousRelationships & FormsNext SQL Intro  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/introduction/",
    "content": " Introduction to SQL   SQL (Structured Query Language) is a standardized language used to manage and manipulate relational databases. SQL allows you to:\n\nQuery Data: Retrieve specific information from large datasets.\nInsert Data: Add new records to the database.\nUpdate Data: Modify existing data.\nDelete Data: Remove records from the database.\n\n\n  Real World Example  Imagine you own a chai business with stores in multiple cities. You want to store information about different chai varieties, their ingredients, prices, and the cities where they‚Äôre sold. SQL helps you manage and retrieve this information efficiently. \n\n\n\nWhat is PostgreSQL?\nPostgreSQL is an open-source, powerful relational database management system (RDBMS) that supports advanced SQL features. It is known for:\n\nACID compliance: Ensures reliable transactions (Atomicity, Consistency, Isolation, Durability).\nSupport for JSON and Array data types.\nExtensibility: Custom functions, data types, etc.\n\n\n  Real World Example  You can use PostgreSQL to store chai data across cities and perform complex queries like ‚ÄúWhich city sells the most varieties of chai?‚Äù \n\n\n\nRelational Database Concepts\n\nTables: A table is like a spreadsheet where data is organized into rows and columns.\nRows: Each row represents a single record.\nColumns: Each column represents a specific attribute of the data.\n\nExample: A Chai table with the following columns: id, name, ingredients, price, city_sold.\n...  | id | name     | ingredients      | price | city_sold |  |-----|--------------|------------------------|-------|-----------|  | 1  | Masala Chai | Tea, Milk, Spices   | 50  | Mumbai  |  | 2  | Assam Chai  | Assam Tea, Milk, Sugar | 40  | Delhi   |...\nSummary\nIn this chapter we have learned about SQL and PostgreSQL. We have also learned about relational databases and their concepts. By the end of this chapter, you should have a good understanding of SQL and how it can be used to manage and manipulate relational databases.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext PostgreSQL  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/postgres/",
    "content": " PostgreSQL   PostgreSQL is a powerful, open-source relational database management system (RDBMS) that is widely used for storing and managing large amounts of structured data. It is known for its robustness, scalability, and support for complex queries and transactions.\nInstalling PostgreSQL\nTo install PostgreSQL, on:\n\nWindows: Download the PostgreSQL installer from the official site.\nMac:\nTerminal window# Use Homebrewbrew install postgresql\n\nLinux:\nTerminal window# Use the official PostgreSQL installer.sudo apt install postgresql\n\nDocker: Use the official PostgreSQL Docker image.\n\nSetting up a PostgreSQL\nTo set up a PostgreSQL database, follow these steps:\n\n\nStart the PostgreSQL Service\nStart the PostgreSQL service to ensure it‚Äôs running on your system:\nTerminal windowsudo service postgresql start\n\n\nCreate a Database\ncreate a new database for your chai and city date:\nTerminal windowcreatedb chai_and_city\nthis creates a new database called chai_and_city in postgresql.\n\n\nConnecting to the Database\nConnecting to your newly created database using PostgreSQL command line interface:\nTerminal windowpsql -d chai_and_city\nthis will prompt you to enter your password. Enter your password.\nHere -d is a flag that specifies the database you want to connect to.\n\n\npgAdmin as GUI\npgAdmin is a graphical interface for managing PostgreSQL databases. Follow these steps to connect and manage your database using pgAdmin:\n\nDownload and Install pgAdmin:\nGo to the official pgAdmin website and install it for your operating system.\nConnect to your local PostgreSQL Server:\nOpen pgAdmin and create a new server connection.\nFor the host name, use localhost and enter your PostgreSQL username and password.\nCreate a Database:\nRight-click on your server in pgAdmin, select ‚ÄúCreate,‚Äù and choose ‚ÄúDatabase.‚Äù\nName the database chai_and_cities.\nManage Data Visually:\nYou can now use pgAdmin‚Äôs graphical interface to create tables, insert data, and run queries\n\nSummary\nIn this chapter, we learned how to install PostgreSQL and set up a database. We also learned how to connect to the database using PostgreSQL command line interface and pgAdmin.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousSQL IntroNext Database Design  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/normalization/",
    "content": " Normalization   Database design is the process of creating a logical structure for storing data in a database. It involves defining the relationships between tables, identifying the primary and foreign keys, and ensuring that the data is normalized to minimize redundancy and improve data integrity.\nUnderstanding Database Design Principles\n\nGood database design avoids data redundancy and ensures data integrity.\nExample: Instead of storing the city name in every row for each chai type, store city details in a separate Cities table and link it with the Chai table using foreign keys.\n\nWhat is Normalization?\nNormalization organizes a database into tables and columns to:\n\nEliminate data redundancy.\nEnsure data dependencies are logical.\n\nFirst Normal Form (1NF)\n\n1NF ensures that the data in a table is organized into rows and columns, with each column holding atomic (indivisible) values.\nExample: A Chai table should have columns like name, ingredients, price, and each cell should contain a single value. You shouldn‚Äôt have multiple cities listed in one cell.\n\nSecond Normal Form (2NF)\n\n2NF ensures that each table depends on the primary key. There should be no partial dependencies (where a non-key column depends on part of a composite key).\nExample: If a table has a composite key (chai_id, city_id), ensure all non-key columns (like price) depend on the entire key, not just one part.\n\nThird Normal Form (3NF)\n\n3NF ensures that non-primary-key columns do not depend on other non-primary-key columns.\nExample: A Chai table shouldn‚Äôt have both city_name and city_population. Instead, city_name and city_population should belong in a separate City table, and you can link it to the Chai table with a city_id.\n\nEntity Relationship Diagrams (ERDs)\nERDs are used to visually represent relationships between database entities.\n\nExample: You might have two tables: Chai and City. An ERD would show a one-to-many relationship between cities and chai varieties.\nOne-to-Many Relationship: One city can have many chai varieties, but each chai variety is sold in one city.\n\nRelationship in SQL\nThere are different types of relationships in SQL:\n\nOne-to-One Relationship: One entity can have only one instance of another entity.\nOne-to-Many Relationship: One entity can have multiple instances of another entity.\nMany-to-Many Relationship: One entity can have multiple instances of another entity, and vice versa.\n\nLMS practice Exercise\nWe will create a fun practice database design for Learning Management System (LMS) using SQL. The LMS will have the following entities:\n\nUsers\nCourses\nVideos\nEnrollments\n\nusers [icon:user] { _id string pk name string email string unique password string userType enum \"student\", \"instructor\", \"admin\" isPaid boolean enrolledCourses ObjectId[] courses createdAt Date updatedAt Date}\ncourses [icon:book] { _id string pk title string description string price number instructorId ObjectId users category string tags string[] durationInHours number videos ObjectId[] videos createdAt Date updatedAt Date}\nvideos [icon:video] { _id string pk courseId ObjectId courses title string description string url string durationInMinutes number createdAt Date updatedAt Date}\nenrollments [icon:user] { _id string pk userId ObjectId users courseId ObjectId courses enrollmentDate Date progress number completedAt Date createdAt Date updatedAt Date}\nusers._id < enrollments.userIdenrollments.userId > users._idcourses._id < enrollments.courseIdenrollments.courseId > courses._idcourses._id < videos.courseIdvideos.courseId > courses._idusers._id < courses.instructorIdcourses.instructorId > users._id\nSummary\nIn this chapter, we have learned about database design and normalization. We have also learned about the basic data types and how to use them. We have also learned about the different types of relationships and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousPostgreSQLNext Exercise - DB Design  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/database-design-exercise/",
    "content": " Database Design Exercise   In this exercise, we‚Äôll explore practical database design using a real-world scenario. We‚Äôll learn how to structure and manage data effectively by implementing a database solution for a chai store business.\nClient Requirements:\nYou‚Äôve been approached by a client who runs a small chai store and wants to set up a simple database to manage their chai offerings. The client has provided the following requirements:\n\n\nDatabase Setup:\nCreate a new database named chai_store_db for managing chai products.\n\n\nChai Table:\nCreate a table called chai_store with the following columns:\n\nid: A unique identifier for each chai (auto-incrementing).\nchai_name: The name of the chai (e.g., ‚ÄúMasala Chai‚Äù, ‚ÄúGreen Chai‚Äù).\nprice: The price of each chai.\nchai_type: Type of chai (e.g., ‚ÄúSpiced‚Äù, ‚ÄúHerbal‚Äù, ‚ÄúCold‚Äù).\navailable: Boolean value indicating if the chai is currently available or not.\n\n\n\n\nInitial Data Insertion:\nThe client provides a list of their chai offerings and wants you to insert the following data:\n\nMasala Chai - ‚Çπ30 - Spiced - Available\nGreen Chai - ‚Çπ25 - Herbal - Available\nBlack Chai - ‚Çπ20 - Classic - Available\nIced Chai - ‚Çπ35 - Cold - Not Available\nOolong Chai - ‚Çπ40 - Specialty - Available\n\n\n\n\nData Queries:\nThe client needs some reports:\n\nDisplay all chai names and prices, using column aliases like ‚ÄúChai Name‚Äù and ‚ÄúCost in INR‚Äù.\nFind all chai varieties that have the word ‚ÄúChai‚Äù in their name.\nList all chai varieties that cost less than ‚Çπ30.\nShow chai varieties sorted by price from highest to lowest.\n\n\n\n\nData Updates:\nThe client wants to update the price of ‚ÄúIced Chai‚Äù to ‚Çπ38 and mark it as available.\n\n\nData Deletions:\nThe client decides to discontinue ‚ÄúBlack Chai‚Äù and requests its removal from the database.\n\n\nSQL Solution:\n\n\nCreate a new Database for the chai store:\nCREATE DATABASE chai_store_db;\n\n\nCreate a new table for the chai store:\nCREATE TABLE chai_store (  id SERIAL PRIMARY KEY,  chai_name VARCHAR(100) NOT NULL,  price DECIMAL(5, 2) NOT NULL,  chai_type VARCHAR(100) NOT NULL,  available BOOLEAN NOT NULL);\n\n\nInsert the initial data into the chai store table:\nINSERT INTO chai_store (chai_name, price, chai_type, available)VALUES ('Masala Chai', 30, 'Spiced', TRUE),    ('Green Chai', 25, 'Herbal', TRUE),    ('Black Chai', 20, 'Classic', TRUE),    ('Iced Chai', 35, 'Cold', FALSE),    ('Oolong Chai', 40, 'Specialty', TRUE);\n\n\nDisplay all chai names and prices, using column aliases:\nSELECT chai_name AS \"Chai Name\", price AS \"Cost in INR\"FROM chai_store;\n\n\nFind all chai varieties that have the word ‚ÄúChai‚Äù in their name:\nSELECT * FROM chai_storeWHERE chai_name LIKE '%Chai%';\n\n\nList all chai varieties that cost less than ‚Çπ30:\nSELECT * FROM chai_storeWHERE price < 30;\n\n\nShow chai varieties sorted by price from highest to lowest:\nSELECT * FROM chai_storeORDER BY price DESC;\n\n\nUpdate the price of ‚ÄúIced Chai‚Äù to ‚Çπ38 and mark it as available:\nUPDATE chai_storeSET price = 38, available = TRUEWHERE chai_name = 'Iced Chai';\n\n\nDelete ‚ÄúBlack Chai‚Äù from the database:\nDELETE FROM chai_storeWHERE chai_name = 'Black Chai';\n\n\nAdditional Resources:\nTo delete entire table:\nDROP TABLE chai_store;\nAlso, you can use the TRUNCATE command to delete all rows from a table:\nTRUNCATE TABLE chai_store;\nMost of the time you will see that DROP command is used with IF Exists clause to avoid accidental errors:\nDROP TABLE IF EXISTS chai_store;\nSummary\nIn this chapter, we have learned about the basics of SQL and how to use it to manage and manipulate relational databases. We have also learned about the different types of relationships in SQL and how to use them.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousDatabase DesignNext SQL Joins and Keys  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/joins-and-keys/",
    "content": " SQL Joins and Keys   In relational databases, joins are used to combine rows from two or more tables based on a related column between them. There are several types of joins, each designed for specific purposes. Joins are a way to combine data from multiple tables to create a single result set.\nTypes of Joins\nThere are several types of joins, each designed for specific purposes. Here are some common types of joins:\nInner Join\n\nUsed to combine rows from two tables based on a related column between them. It returns only the rows that have matching values in both tables.\nOnly rows that have matching values in both tables are returned.\n\nLeft Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from the left table, and the matching rows from the right table.\nIf there are no matching rows in the right table, NULL values are returned for the columns from the right table.\n\nRight Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from the right table, and the matching rows from the left table.\nIf there are no matching rows in the left table, NULL values are returned for the columns from the left table.\n\nFull Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all rows from both tables, and the matching rows from both tables.\nIf there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\nCross Join\n\nUsed to combine rows from two tables based on a related column between them. It returns all possible combinations of rows from both tables.\nIf there are no matching rows in either table, NULL values are returned for the columns from the other table.\n\nKeys in SQL\nIn SQL, keys are crucial for organizing and relating data between tables. There are two main types of keys:\nPrimary Key\n\nA column or set of columns that uniquely identifies each row in a table\nMust contain unique values and cannot be null\nOnly one primary key per table\nExample: customer_id, order_id, product_id\n\nForeign Key\n\nA column that creates a relationship between two tables\nReferences the primary key of another table\nCan have multiple foreign keys in a table\nMaintains referential integrity between tables\nExample: customer_id in orders table referencing customers table\n\n  Tip  Let‚Äôs understand primary and foreign keys through a practical example of a chai store database. \nPractical Example: Chai Store Database\nWe‚Äôll create four interconnected tables to demonstrate how keys work in a real scenario:\ncustomers table\nThe customers table stores information about each customer.\nCREATE TABLE customers ( customer_id SERIAL PRIMARY KEY, customer_name VARCHAR(50), contact_info VARCHAR(100));\nLet‚Äôs add some sample data to the chai_store table:\nINSERT INTO chai_store (chai_name, price, chai_type)VALUES ('Masala Chai', 30.00, 'Spiced'),    ('Green Chai', 25.00, 'Herbal'),    ('Black Chai', 20.00, 'Classic'),    ('Iced Chai', 35.00, 'Cold'),    ('Oolong Chai', 40.00, 'Specialty');\nchai_store table\nThe chai_store table stores information about the chai available in the store.\nCREATE TABLE chai_store (  chai_id SERIAL PRIMARY KEY,  chai_name VARCHAR(50),  price DECIMAL(5, 2),  chai_type VARCHAR(50));\nLet‚Äôs add some sample data to the chai_store table:\nINSERT INTO chai_store (chai_name, price, chai_type)VALUES ('Masala Chai', 30.00, 'Spiced'),    ('Green Chai', 25.00, 'Herbal'),    ('Black Chai', 20.00, 'Classic'),    ('Iced Chai', 35.00, 'Cold'),    ('Oolong Chai', 40.00, 'Specialty');\norders table\nThe orders table stores information about each order placed by customers.\nCREATE TABLE orders ( order_id SERIAL PRIMARY KEY, customer_id INT, order_date DATE, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));\nLet‚Äôs add some sample data to the orders table:\nINSERT INTO orders (customer_id, order_date)VALUES (1, '2024-09-19'),    (2, '2024-09-18'),    (1, '2024-09-20'),    (4, '2024-09-17');\norder_items table\nThe order_items table stores information about each item in each order.\nCREATE TABLE order_items ( order_item_id SERIAL PRIMARY KEY, order_id INT, chai_id INT, quantity INT, price DECIMAL(5, 2), FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (chai_id) REFERENCES chai_store(chai_id));\nLet‚Äôs add some sample data to the order_items table:\nINSERT INTO order_items (order_id, chai_id, quantity, price)VALUES (1, 1, 2, 30.00),    (1, 2, 1, 25.00),    (2, 3, 2, 20.00),    (3, 1, 1, 30.00),    (4, 5, 3, 40.00);\nThis is our sample setup for the chai store database. This consists of four tables: customers , chai_store , orders , and order_items . Tables are storing data about customers, chai varieties, orders, and the items in each order. Tables are linked together using foreign keys.\nPrimary keys are used to uniquely identify each row in a table. Foreign keys are used to establish relationships between tables. Foreign keys are used to link tables based on a related column between them.\nSummary\nIn this chapter, we have learned about the basics of SQL Joins. Also we have learned about Primary Key and Foreign Key.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousExercise - DB DesignNext Exercise - Joins  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-sql/joins-exercise/",
    "content": " SQL Joins Exercise   In this exercise, we‚Äôll explore practical sql joins using a real-world scenario. We‚Äôll learn how to use joins to combine data from multiple tables.\nCreate 2 tables for a chai store\nWe will create 2 tables for a chai store so that we can practice joins. The tables will be:\nchai table\nCREATE TABLE chai ( chai_id SERIAL PRIMARY KEY, chai_name VARCHAR(50), price DECIMAL(5, 2));\nLet‚Äôs add some sample data to the chai table:\nINSERT INTO chai (chai_name, price)VALUES ('Masala Chai', 30.00),    ('Green Chai', 25.00),    ('Iced Chai', 35.00);\norders table\nCREATE TABLE orders ( order_id SERIAL PRIMARY KEY, chai_id INT, customer_name VARCHAR(50), quantity INT, FOREIGN KEY (chai_id) REFERENCES chai(chai_id));\nLet‚Äôs add some sample data to the orders table:\nINSERT INTO orders (chai_id, customer_name, quantity)VALUES (1, 'Alice', 2),    (2, 'Bob', 1),    (1, 'Charlie', 3),    (3, 'David', 1);\nChallenges\nNow, let‚Äôs try to solve some challenges using joins.\n\n\nInner Join\nGet the list of all orders with the chai variety and customer details.\n\n\nLeft Join\nShow all customers and their orders, but also include customers who haven‚Äôt ordered anything yet (if any).\n\n\nRight Join\nShow all chai varieties, including those that haven‚Äôt been ordered yet.\n\n\nFull Outer Join\nList all customers and all chai varieties, with or without orders.\n\n\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousSQL Joins and KeysNext Welcome  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/welcome/",
    "content": " Welcome   Haanji! Swagat hai Chai aur Docs mein. üéâ\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúDeploy To Production‚Äù series on the Hitesh Choudhary YouTube channel. For the best learning experience, we recommend following these docs alongside our video tutorials.\n Play  \nLet‚Äôs begin with the basics in the next section‚Ä¶\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousExercise - JoinsNext Server Startup  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/setup-vpc/",
    "content": " Setting up VPC for deployment   In this tutorial, we will learn how to set up a server for hosting. We will cover topics such as server selection, server configuration, and server hardening.\n Play  \nServer Selection\nBefore setting up a server, it‚Äôs important to choose the right server for your needs. There are several factors to consider when selecting a server, including:\n\nBudget: Determine how much you can afford to spend on a server.\nPurpose: Decide what you want to use the server for, such as hosting a website, running a business, or running a development environment.\nLocation: Choose a server that is close to your users and has good connectivity.\nSecurity: Ensure that the server is secure and protected against potential threats.\n\nServer Configuration\nOnce you have chosen a server, you need to configure it properly. This involves setting up the server‚Äôs operating system, configuring the server‚Äôs network settings, and setting up any necessary software or applications.\nOS Configuration\nThe first step in configuring a server is to set up the operating system. This involves installing the operating system and any necessary software packages. Here are some steps to follow:\n\n\nChoose an operating system\nSelect an operating system that is compatible with your needs and budget. Some popular options include Ubuntu, CentOS, and Debian.\n\n\nUpdate the operating system\nUse a package manager like apt or yum to update the operating system on the server.\n\n\nConfigure the network settings\nSet up the network settings, such as IP address, subnet mask, and gateway, to ensure that the server can communicate with other devices on the network.\n\n\nInstall any necessary software\nInstall any necessary software packages, such as web servers, database servers, or development tools, on the server.\n\n\nGet an account on any cloud provider\nWe will use Linode as our cloud provider. Linode is a cloud hosting provider that offers a wide range of virtual private servers (VPS) with varying configurations and prices. It is a popular choice for hosting web applications and other types of software.\nOnce the account is created, you can choose the plan that best suits your needs. The plan will determine the number of servers you can create, the amount of storage space available, and the price per month.\nOnce the machine is created and up and running, you can connect to it using your terminal, in my case I am using warp terminal. You can use warp to connect to your machine and manage it remotely.\nTerminal windowssh root@192.IP.IP.IP\nNow we are inside our machine and we can start installing the necessary packages and software but before that let‚Äôs upgrade our system.\nTerminal windowapt updateapt upgradeapt update\nAlways run the apt update command before apt upgrade to ensure that you have the latest packages available.\nChange password (optional)\nAlthough most cloud providers offer a way to change the password of your machine directly from the control panel but in case you want to do it manually, you can use the following command:\nTerminal windowpasswd\nThis will prompt you to enter your current password and then you will be prompted to enter a new password. Once you have entered the new password, you will be prompted to confirm it. After that, the password will be changed.\nAdd Non-root User\nTo add a non-root user, you can use the following command:\nTerminal windowuseradd -m -s /bin/bash usernamegroups username\nThis will create a new user with the specified username and you can check the groups of the user using the groups command. After that, you can add the user to the sudoers group using the following command:\nTerminal windowusermod -aG sudo username\nThis will add the user to the sudoers group, giving them the ability to run commands with sudo privileges. Now lets create a password for the user:\nTerminal windowsudo passwd username\nThis will prompt you to enter a new password for the user. After that, you can log in as the user using the following command:\nTerminal windowssh username@192.IP.IP.IP\nFinally, logged in as the user.\nConnect to the server using SSH\nSetting up SSH key on your machine is fairly easy and you need to do it once. You can generate it once as your machine identification and then you can use it to connect to the server. Here is a link to the official documentation on how to generate SSH keys on Linux and MacOS.\nHere are some simple steps to follow:\nTerminal windowssh-keygen -t ed25519 -C \"user@domain.tld\"\nto view the public key\nTerminal windowcat ~/.ssh/id_ed25519.pub\nOnce you have generated the SSH keys, you can add them to your server using the following command (assuming you have copied the public key to your clipboard):\nOn your server, run the following command to copy the public key to the server. Create a new directory called .ssh in your home directory if it doesn‚Äôt already exist. Then create a new file called authorized_keys in the .ssh directory and paste the public key into the file.\nTerminal windownano ~/.ssh/authorized_keys\nPaste the public key into the file.\nadd it to the ssh utility\nTerminal windowssh-add -k ~/.ssh/id_ed25519\nDisable password login\nAfter this, no one will be able to log in to your server using the username and password. Be careful with this.\nTerminal windowsudo nano /etc/ssh/sshd_config\nOpen this file in nano editor and search for PasswordAuthentication and change it to no. Optionally, you can also change the PermitRootLogin to no to prevent root user from logging in.\nNow, restart the ssh service using the following command:\nTerminal windowsudo service ssh restart\nFirewall Configuration\nYou can install firewall package to protect your server from external attacks. In my case I will use linode firewall that I can easily configure from the control panel. Some people prefer to use ufw (Uncomplicated Firewall) which is a simple and easy to use firewall.\nTo install ufw, run the following command:\nTerminal windowsudo apt install ufw\nOnce the package is installed, you can configure the firewall using the following command:\nTerminal windowsudo ufw status\nThis will show the current status of the firewall. To enable the firewall, run the following command:\nTerminal windowsudo ufw enable\nThis will enable the firewall and allow all incoming and outgoing traffic. To allow incoming traffic on a specific port, run the following command:\nTerminal windowsudo ufw allow <port>\nFor example, to allow incoming traffic on port 22, run the following command:\nTerminal windowsudo ufw allow 22\nTo allow incoming traffic on multiple ports, run the following command:\nTerminal windowsudo ufw allow <port1>,<port2>,<port3>\nFor example, to allow incoming traffic on ports 22, 80, and 443, run the following command:\nTerminal windowsudo ufw allow 22,80,443\nSummary\nIn this tutorial, we have learned how to set up a server for hosting. We have covered topics such as server selection, server configuration, and server hardening.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 20, 2025  PreviousWelcomeNext Nginx Configuration  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/setup-nginx/",
    "content": " Nginx Configuration on VPS   Nginx is a popular open-source web server that can be used to serve static files, dynamic content, and proxy requests to other servers. It is known for its high performance, scalability, and security.\nIn this tutorial, we will learn how to install and configure Nginx on any VPS.\n Play  \nPrerequisites\nBefore installing Nginx, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\n\nInstalling Nginx on Ubuntu\nTo install Nginx on Ubuntu, follow these steps:\n\n\nUpdate the package index\n\nTerminal windowsudo apt update\n\n\nInstall Nginx\n\nTerminal windowsudo apt install nginx\n\n\nStart and enable Nginx\n\nTerminal windowsudo systemctl start nginxsudo systemctl enable nginx\n\n\nOpen your web browser and navigate to http://your_server_ip. You should see the Nginx default welcome page.\n\n\nConfiguring Nginx on Ubuntu\n\n\nCreate a new server block configuration file\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\nThis command opens the default configuration file for editing.\n\n\nReplace the file content with the following content:\n\nserver { listen 80; # Listen on port 80, the default HTTP port server_name localhost; # The server name, here it is set to localhost\n root /var/www/html; # The root directory where files are served from index index.html index.htm; # The default files to serve\n location / {  try_files $uri $uri/ =404; # Try to serve the requested URI, if not found return a 404 }}\n\n\nCreate the document root directory if it doesn‚Äôt exist\n\nTerminal windowsudo mkdir -p /var/www/html\n\n\nChange ownership of the document root directory to the current user\n\nTerminal windowsudo chown -R $USER:$USER /var/www/html\n\n\nSet the permissions for the document root directory\n\nTerminal windowsudo chmod -R 755 /var/www/html\n\n\nCreate the directory for the web root.\n\nTerminal windowcd /var/www/html\nThis command navigates to the web root directory.\n\n\nCreate an empty index.html file\n\nTerminal windowtouch index.html\nThis command creates an empty index.html file.\n\n\nOpen the index.html file for editing\n\nTerminal windowsudo vim index.html\nThis command opens the index.html file for editing.\n\n\nAdd the following content to the index.html file:\n\n<html> <head>  <title>Welcome to Nginx</title> </head> <body>  <h1>Hello, world!</h1> </body></html>\n\n\nTest the Nginx configuration\n\nTerminal windowsudo nginx -t\nThis command tests the Nginx configuration for syntax errors.\n\n\nReload Nginx to apply the changes\n\nTerminal windowsudo systemctl reload nginx\nThis command reloads the Nginx service to apply the changes.\n\n\nOpen your web browser and navigate to URL_ADDRESS_server_ip. You should see the Nginx default welcome page.\n\n\nSummary\nIn this tutorial, we learned how to install and configure Nginx to serve static files.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025  PreviousServer StartupNext Nginx Rate Limit  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/nginx-rate-limiting/",
    "content": " Nginx Rate Limit   Rate limiting can be implemented in two primary ways: directly in your application‚Äôs server code, or at the infrastructure level on the machine where your server is running.\nIn this tutorial, we will learn how to do rate limit via Nginx.\n Play  \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\n\nAdding Rate Limiting\nNginx provides a simple way to add rate limiting using the limit_req_zone and limit_req directives.\n\n\nEdit the main configuration file to define a rate limit zone:\n\nTerminal windowsudo vim /etc/nginx/nginx.conf\n\n\nAdd the following to the http block:\n\nhttp { limit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n ...}\nThe directive limit_req_zone is used in Nginx to define a shared memory zone that will be used to store the state of rate limits for incoming requests. Here‚Äôs a breakdown of the specific directive you provided:\nlimit_req_zone $binary_remote_addr zone=mylimit:10m rate=2r/s;\n\n$binary_remote_addr: This is a variable that holds the client‚Äôs IP address in a binary format. Using the binary format saves memory, which is important when dealing with large numbers of requests.\nzone=mylimit:10m: This specifies the name and size of the shared memory zone used to store the state of rate limits.\n\nmylimit is the name of the zone.\n10m means that the size of the zone is 10 megabytes. This size dictates how many IP addresses and their request states can be stored in memory. A 10MB zone can typically store about 160,000 states (given that each state takes about 64 bytes).\n\n\nrate=2r/s: This sets the request rate limit.\n\n2r/s means that each IP address is allowed to make 2 requests per second.\n\n\n\nWhen you configure limit_req_zone in your Nginx configuration, it sets up a system to control how many requests a client can make to your server in a given time frame. This can help protect your server from being overwhelmed by too many requests from a single client, which can be a form of denial-of-service attack.\n\n\nEdit your server block configuration to apply the rate limit:\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\n\n\nAdd the following inside the server block:\nserver { ...\n location / {  limit_req zone=mylimit burst=20 nodelay;  try_files $uri $uri/ =404; }\n ...}\nabove code applies the rate limiting defined by the mylimit zone.\n\nburst=20 allows a burst of up to 20 requests beyond the defined rate. So, even if the rate limit is set to 2 requests per second, the burst allows up to 20 requests to be made in a second. The requests exceeding the rate limit will be rejected immediately.\nnodelay means that requests that exceed the rate limit should be rejected immediately rather than delayed.\n\n\n\n\nTest and reload Nginx:\n\nTerminal windowsudo nginx -tsudo systemctl reload nginx\n\n\nSummary\nIn this tutorial, we have learned how to do rate limit via Nginx.\nReferences\nModule ngx_http_limit_req_module nginx.orgRate Limiting with NGINX ‚Äì NGINX Community Blog blog.nginx.org\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025  PreviousNginx ConfigurationNext Nginx SSL Setup  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/nginx-ssl-setup/",
    "content": " Setup SSL for Nginx   This guide will help you set up SSL for your Nginx server on Ubuntu using Certbot. We will use a subdomain from GoDaddy, and the steps include installing Certbot, configuring Nginx, and generating an SSL certificate.\n Play  \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\n\nInstall Certbot and the Nginx Plugin\nFirst, install Certbot and the Nginx plugin using the following command:\nTerminal windowsudo apt install certbot python3-certbot-nginx\nConfigure Nginx\nEdit your Nginx configuration file to include your server name. Open the file with a text editor:\nTerminal windowsudo vim /etc/nginx/sites-available/default\nAdd your subdomain in the server_name directive:\nserver { ... server_name test.chaicode.com; ...}\nSave the file and exit the editor. Then, test your Nginx configuration:\nTerminal windowsudo nginx -t\nCreate an A Record in Your Domain Registrar\nLog in to your domain registrar (e.g., GoDaddy) and create an A record pointing to the IP address of your server.\n\nRecord Type: A\nName: test.chaicode.com\nValue: IPv4 address of the server\n\nNOTE: Its always a good idea to create a elastic/static IP for your server. This will make sure that your IP address doesn‚Äôt change on restart or reboot.\nObtain an SSL Certificate\nRun Certbot to obtain an SSL certificate for your subdomain:\nTerminal windowsudo certbot --nginx -d test.chaicode.com\nFollow the prompts:\n\nEnter the email address associated with your domain registrar account.\nAccept the terms of service.\nPress Enter to continue.\n\nCertbot will automatically configure your Nginx to use the new certificate. You should see a message indicating that the certificate was successfully issued.\n\nAccess Your Site\nYou can now access your site using HTTPS:\nTerminal windowhttps://test.chaicode.com\n\nRenewing the Certificate\nTo check if the certificate is close to expiring, run:\nTerminal windowsudo certbot renew --dry-run\nTo renew the certificate, run:\nTerminal windowsudo certbot renew\nThis guide ensures that your Nginx server is secured with SSL, making your site accessible over HTTPS.\nSummary\nIn this guide, we learned how to set up SSL for Nginx on Ubuntu using Certbot. We installed Certbot and the Nginx plugin, configured Nginx, created an A record in your domain registrar, and obtained an SSL certificate. We also learned how to renew the certificate.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025  PreviousNginx Rate LimitNext Deploy Node API  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/node-nginx-vps/",
    "content": " Deploy Node API with Nginx    Play  \nPrerequisites\nBefore going forward, make sure you have the following prerequisites:\n\nA server with root access\nA domain name or IP address\nA web server that can be used to serve static files\nNginx installed and configured on the machine\nSSL configured for the domain name or IP address\n\nCreate a Small Express App\nWe will create a small express app to test the deployment. Here are the steps:\n\n\nInstall nodejs and npm on ubuntu\n\nTerminal windowsudo apt install nodejssudo apt install npm\n\n\nCreate a project dir and initialize a node app\n\nTerminal windowmkdir express-appcd express-appnpm init -y\n\n\nInstall basic dependencies\n\nTerminal windownpm install express nodemon\n\n\nUpdate the package.json\n\n{ \"name\": \"express-app\", \"version\": \"1.0.0\", \"description\": \"\", \"main\": \"index.js\", \"type\": \"module\", \"scripts\": {  \"dev\": \"nodemon index.js\" }, \"keywords\": [], \"author\": \"\", \"license\": \"ISC\", \"dependencies\": {  \"express\": \"^4.19.2\",  \"nodemon\": \"^3.1.4\" }}\n\n\nCreate an index.js file and add the following code\n\nTerminal windowtouch index.js\nimport express from \"express\";const app = express();app.get(\"/api\", (req, res) => { return res.status(200).json({  message: \"server working\", });});app.listen(8080, () => console.log(\"Server is running on 8080\"));\n\n\nInstall pm2 to run this dummy app in the background\n\nTerminal windownpm install -g pm2 # if npm is not available use sudo npm install -g pm2\n\n\nRun the application with the following command:\n\nTerminal windowpm2 start \"npm run dev\"\nThis will start the application on port 8080.\n\n\nDo a reverse proxy with nginx\nNginx can also act as a reverse proxy, forwarding client requests to other servers. Here are the steps to configure Nginx as a reverse proxy:\n\n\nEdit your server block configuration:\n\nTerminal windowsudo vim /etc/nginx/sites-available/default\n\n\nConfigure the server block to act as a reverse proxy:\n\nserver { listen 80; # Listen on port 80 for incoming HTTP requests server_name localhost; # Server name or domain name this block will respond to\n location / {  proxy_pass http://127.0.0.1:8080; # Proxy requests to the backend server running on localhost:8080  proxy_set_header Host $host; # Set the Host header to the client's original host  proxy_set_header X-Real-IP $remote_addr; # Set the X-Real-IP header to the client's IP address  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Append client's IP addresses to X-Forwarded-For header  proxy_set_header X-Forwarded-Proto $scheme; # Set the X-Forwarded-Proto header to the client's protocol (http or https) }}\n\n\nTest and reload Nginx:\n\nTerminal windowsudo nginx -tsudo systemctl reload nginx\n\n\nNow, when you request http://<server_ip>/api it will return the following response:\n\n{ \"message\": \"server working\" }\n\n\nSummary\nIn this guide, we learned how to deploy a Node API with Nginx on Ubuntu server. We also learned how to configure Nginx as a reverse proxy.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025  PreviousNginx SSL SetupNext PostgreSQL & Docker  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/postgresql-docker/",
    "content": " Setting Up PostgreSQL with Docker   PostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on your system. In this modern age, you can take advantage of Docker to easily set up and run PostgreSQL on your local machine. Docker is a platform that allows you to package, distribute, and run applications in containers. It provides a lightweight and efficient way to run applications in isolated environments. Docker is available for Windows, macOS, and Linux, making it a versatile tool for developers.\n Play  \nPrerequisites\nBefore you begin, you will need to have the following prerequisites:\n\nA system running Windows, macOS, or Linux\nDocker installed on your system\nBasic knowledge of using the command line\n\nInstalling Docker\nIf you don‚Äôt have Docker installed on your system, you can download and install it from the official Docker website. Follow the instructions provided on the website to install Docker on your system.\nOnce the docker is installed, you can verify the installation by running the following command in your terminal:\nTerminal windowdocker --version\nThis command will display the version of Docker installed on your system.\nCreate Storage Directory\nNow that you have Docker installed, create a new directory for your PostgreSQL data. This directory will be used to store the data files for your PostgreSQL instance. I usually keep this directory in my project folder so that it is easy to manage.\nDocker Compose File\nNow, create a new file named compose.yml in the same directory. This file will contain the configuration for your PostgreSQL container.\nInsert the following content into the compose.yml file:\ncompose.ymlservices: db:  image: postgres:alpine  container_name: postgres  restart: always  environment:   POSTGRES_DB: ${DB_NAME}   POSTGRES_USER: ${DB_USER}   POSTGRES_PASSWORD: ${DB_PASSWORD}  ports:   - ${DB_PORT}:5432 # make sure you don't have another container running on DB_PORT  healthcheck:   test: [\"CMD-SHELL\", \"pg_isready -d $${DB_NAME} -U $${DB_USER}\"]   interval: 10s   timeout: 30s   retries: 5  volumes:   - ./data/db:/var/lib/postgresql/data  attach: false\n adminer:  image: adminer  restart: always  ports:   - 8080:8080\nIn this configuration file, we define two services: db and adminer. The db service is responsible for running the PostgreSQL instance, while the adminer service is responsible for running the Adminer web interface. It is a lightweight database management tool that allows you to interact with your databases through a web interface.\nThe db service uses the postgres image from the Docker Hub registry. We specify the volume mapping to store the data files in the ./data/db directory. The ports section maps the container port 5432 to the host port 5432, allowing you to access the PostgreSQL instance from your local machine.\nWe also set the environment variables POSTGRES_DB, POSTGRES_USER, and POSTGRES_PASSWORD to configure the database name, username, and password, respectively.\nThe adminer service uses the adminer image from the Docker Hub registry. We map the container port 8080 to the host port 8080 to access the Adminer web interface.\nEnvironment Variables\nTo configure the database name, username, and password, you can create a .env file in the same directory as the compose.yml file. Add the following content to the .env file:\n.envDB_NAME=chai-dbDB_USER=chaicodeDB_PASSWORD=chaiaurcodeDB_PORT=5432\nReplace the values of DB_NAME, DB_USER, and DB_PASSWORD with your desired database name, username, and password, respectively.\nStart the PostgreSQL Container\nNow that you have created the compose.yml file, you can start the PostgreSQL container by running the following command in the terminal:\nTerminal windowdocker compose up -d\nThis command will download the necessary images and start the PostgreSQL and Adminer containers in the background. You can verify that the containers are running by executing the following command:\nTerminal windowdocker ps\nThis command will display a list of running containers on your system. You should see the db and adminer containers listed in the output.\nYou can now access the Adminer web interface by opening a web browser and navigating to http://localhost:8080. In the login page, enter the database name, username, and password that you specified in the compose.yml file. You should now be able to interact with your PostgreSQL database through the Adminer web interface.\nConnect with PostgreSQL\nIf you want to connect with database url, you can use the following url:\npostgresql://chaicode:chaiaurcode@localhost:5432/chai-db\nThat‚Äôs it! You have successfully set up PostgreSQL using Docker on your system. You can now start developing applications that use PostgreSQL as the backend database.\nSummary\nIn this tutorial, we have learned how to set up PostgreSQL using Docker on your system. We have also learned how to connect with the database using the Adminer web interface.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 21, 2025  PreviousDeploy Node APINext PostgreSQL on VPS  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/postgresql-vps/",
    "content": " Setting Up PostgreSQL On VPS   PostgreSQL is a powerful, open-source object-relational database system. It is a highly scalable, SQL-compliant database management system that is used to handle large workloads. PostgreSQL is a popular choice for many developers and organizations due to its robust features, extensibility, and reliability.\nIn this tutorial, we will walk you through the process of setting up PostgreSQL on Ubuntu on a VPS.\nInstall PostgreSQL\nTerminal windowsudo apt updatesudo apt install postgresqlsudo service postgresql start # start the service\nCheck PostgreSQL is running\nTerminal windowsudo service postgresql status\nMake sure the service is running\nUse psql to connect to the database\nTerminal windowsudo -u postgres psql\nThis will open a CLI where you can run SQL commands.\nAfter first launching psql, you may check the details of your connection by typing \\conninfo into the interpreter.\nTerminal windowpostgres=# \\conninfoConnection to database \"postgres\" by user \"postgres\". Host: localhost Port: 5432 Username: postgres Database: postgres SSL off\nList databases\nTerminal windowpostgres=# \\l                 List of databases  Name  | Owner  | Encoding | Collate  |  Ctype  |  Access privileges ----------+----------+----------+------------+------------+----------------------- postgres | postgres | UTF8   | en_US.utf8 | en_US.utf8 | template0 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres     +      |     |     |      |      | postgres=CTc/postgres template1 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres     +      |     |     |      |      | postgres=CTc/postgres\n (3 rows)\nCreate a database\nTerminal windowpostgres=# CREATE DATABASE mydb;CREATE DATABASE\nList databases\nTerminal windowpostgres=# \\l                List of databases   Name  | Owner  | Encoding | Collate  |  Ctype  |  Access privileges ----------+----------+----------+------------+------------+----------------------- mydb   | postgres | UTF8   | en_US.utf8 | en_US.utf8 | postgres | postgres | UTF8   | en_US.utf8 | en_US.utf8 | template0 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres     +      |     |     |      |      | postgres=CTc/postgres template1 | postgres | UTF8   | en_US.utf8 | en_US.utf8 | =c/postgres     +      |     |     |      |      | postgres=CTc/postgres\n (4 rows)\nList tables\nTerminal windowpostgres=# \\dt\n     List of relations Schema | Name | Type | Owner -------+------+-------+---------- public | foo | table | postgres public | bar | table | postgres\n (2 rows)\nSetup PostgreSQL server\nOpen the file /etc/postgresql/<version>/main/postgresql.conf and add the following lines:\nlisten_addresses = '*'\nThis will allow connections from any IP address. This is not recommended for production environments.\nConnection Settings\nAdd the following lines in /etc/postgresql/<version>/main/pg_hba.conf:\n# Allow connections from any IP addresshost  all       all       0.0.0.0/0        md5\nRestart the PostgreSQL server:\nTerminal windowsudo service postgresql restart# orsudo systemctl restart postgresql\nThis server will be accessible at localhost:5432 if your backend server is running on the same machine. If you are running the backend server on a different machine, you will need to configure the host and port settings in the .env file.\nSummary\nIn this tutorial, we have learned how to set up PostgreSQL on Ubuntu on a VPS. We have also learned how to create a database, list tables and configure connection settings.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025  PreviousPostgreSQL & DockerNext Advance Node Logger  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  },
  {
    "url": "https://chaidocs.vercel.app/youtube/chai-aur-devops/node-logger/",
    "content": " Advanced Node.js Logging   Node Logger is a powerful tool that allows you to log messages to the console, file, or other destinations. It provides a simple and flexible API for logging messages, making it easy to debug and monitor your Node.js applications. Console logs are great for quick debugging, but they can be difficult to manage and analyze.\nThis guide has been carefully curated as a comprehensive reference for the ‚ÄúAdvance logging with morgan and winston‚Äù section in the Complete Web Dev Course on Udemy course. For the best learning experience, we recommend following these docs alongside our video lectures.\n\n\nThis is my personal configuration for Winston logger. You can use it as a reference.\n\nInstallation\nTo install Winston, you can use the following command:\n     bun   pnpm   npm   yarn   Terminal windowbun add winston morgan Terminal windowpnpm add winston morgan Terminal windownpm install winston morgan Terminal windowyarn add winston morgan   \nThis will install the winston and morgan packages, which are used to configure and use the Winston logger.\nConfiguration\nTo configure Winston, you can create a new file called logger.js in the root directory of your project and add the following code:\nlogger.jsimport {createLogger, format, transports} from \"winston\";const {combine, timestamp, json, colorize} = format;\n// Custom format for console logging with colorsconst consoleLogFormat = format.combine( format.colorize(), format.printf(({ level, message, timestamp }) => {  return `${level}: ${message}`; }));\n// Create a Winston loggerconst logger = createLogger({ level: \"info\", format: combine(colorize(), timestamp(), json()), transports: [  new transports.Console({   format: consoleLogFormat,  }),  new transports.File({ filename: \"app.log\" }), ],});\nexport default logger;\nThis code configures Winston to log messages to the console and a file called app.log. It also sets the log level to info and uses the colorize and timestamp formatters to add colors and timestamps to the console logs.\nUsage\nTo use the Winston logger, you can import it in your code and use it as follows:\nFirst go to your index.js file and add the following code:\nindex.jsimport logger from \"./logger\";import morgan from \"morgan\";\nconst morganFormat = \":method :url :status :response-time ms\";\napp.use( morgan(morganFormat, {  stream: {   write: (message) => {    const logObject = {     method: message.split(\" \")[0],     url: message.split(\" \")[1],     status: message.split(\" \")[2],     responseTime: message.split(\" \")[3],    };    logger.info(JSON.stringify(logObject));   },  }, }));\nThis will log the messages to the console and the file app.log. The morgan package is used to format the log messages and the stream option is used to write the log messages to the console.\nEasy log messages\nTo use the Winston logger, you can import it in your code and use it as follows:\nimport logger from \"./logger\";\nlogger.info(\"This is an info message\");logger.error(\"This is an error message\");logger.warn(\"This is a warning message\");logger.debug(\"This is a debug message\");\nThis will log the messages to the console and the file app.log.\nSummary\nIn this tutorial, we have learned how to use the advanced Node Logger such as Winston and morgan. We have also learned how to configure and use the Winston logger in our Node.js applications. By using the advanced Node Logger, we can easily log messages to the console, file, or other destinations, making it easier to debug and monitor our applications.\nNow, you can use the advanced Node Logger to log messages in your Node.js applications and make it easier to debug and monitor your applications.\nStart your journey with ChaiCode \nAll of our courses are available on chaicode.com. Feel free to check them out.\n   \nComplied by: Hitesh Choudhary Last updated: Apr 22, 2025  PreviousPostgreSQL on VPS  \nContribute\n  \nCommunity\n  \nSponsor\n  "
  }
]